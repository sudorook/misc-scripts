#!/bin/bash

# SPDX-FileCopyrightText: 2023 - 2024 sudorook <daemon@nullcodon.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

set -euo pipefail

ROOT="$(dirname "${0}")"

source "${ROOT}"/globals

! check_command find fzf mpv sftp ssh && exit 3

#
# Functions
#

print_list() {
  ssh \
    "${SSH_USER:+${SSH_USER}@}${REMOTE}" \
    'find '"${DIR@Q}"' -type f \( \
      -iname "*.avi" -o \
      -iname "*.m4v" -o \
      -iname "*.mkv" -o \
      -iname "*.mov" -o \
      -iname "*.mp4" -o \
      -iname "*.ogg" -o \
      -iname "*.ts" -o \
      -iname "*.webm" -o \
      -iname "*.wmv" \)'
}

print_fuzzy_search() {
  ssh \
    "${SSH_USER:+${SSH_USER}@}${REMOTE}" \
    'find '"${DIR@Q}" | fzf --algo=v2 --scheme=path --filter="${QUERY}" | head -n 1
}

make_filename() {
  local file
  while read -r file; do
    echo sftp://"${SSH_USER:+${SSH_USER}@}${REMOTE}:${PORT:-22}/${file}" || exit 3
  done <<< "$(< /dev/stdin)"
}

print_usage() {
  show_header "Usage: mpv-ssh"
  show_listitem "\
  -s|--shuffle          flag shuffle streams (default: false)
  -r|--remote           IP address of SSH server
  -u|--user             SSH user name
  -d|--directory        remote directory to search over SSH
  -q|--query            query string for searching remote directories
  -n|--num              number of files to stream over SSH
  -h|--help             print (this) help message"
}

#
# Globals
#

REMOTE=
DIR=

#
# Parse command line variables.
#

OPTIONS=d:shn:q:r:u:
LONGOPTIONS=directory:,shuffle,help,num:,query:,remote:,user:
PARSED=$(getopt -o "${OPTIONS}" --long "${LONGOPTIONS}" -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ ${#} -ge 1 ]; do
  case "${1}" in
    -d | --directory)
      DIR="${2}"
      shift 2
      ;;
    -q | --query)
      QUERY="${2}"
      shift 2
      ;;
    -s | --shuffle)
      SHUFFLE=true
      shift
      ;;
    -h | --help)
      print_usage
      exit
      ;;
    -n | --num)
      NUM="${2}"
      shift 2
      ;;
    -u | --user)
      SSH_USER="${2}"
      shift 2
      ;;
    -r | --remote)
      REMOTE="${2}"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: Unknown argument ${1@Q}. Exiting."
      exit 3
      ;;
  esac
done

#
# Main
#

if ! [[ -v REMOTE ]] || [ -z "${REMOTE}" ]; then
  show_error "ERROR: No remote IP address given. Exiting."
  exit 3
fi

if ! [[ -v DIR ]] || [ -z "${DIR}" ]; then
  show_error "ERROR: No path specified. Exiting."
  exit 3
fi

if [[ -v QUERY ]] && [ -n "${QUERY}" ]; then
  DIR="$(print_fuzzy_search || true)"
  if [ -z "${DIR}" ]; then
    show_error "ERROR: Failed to find search directory. Exiting."
    exit 3
  fi
fi

if "${SHUFFLE:-false}"; then
  print_list | shuf | head -n "${NUM:--0}" | make_filename |
    mpv --playlist=- --load-unsafe-playlists --prefetch-playlist=yes
else
  # `find` output is not in any particular order, so pipe though `sort` first
  print_list | sort -V | head -n "${NUM:--0}" | make_filename |
    mpv --playlist=- --load-unsafe-playlists --prefetch-playlist=yes
fi
