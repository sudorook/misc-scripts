#! /bin/bash
set -euo pipefail
source globals

! check_command find mpv ssh sftp && exit 3

#
# Functions
#

print_list() {
  ssh \
    "${USER:+${USER}@}${REMOTE}" \
    'find '"${DIR@Q}/"' -type f \( -name "*.mkv" -o -name "*.mp4" -o -name "*.avi" \)'
}

make_filename() {
  local file
  while read -r file; do
    echo sftp://"${USER}@${REMOTE}:${PORT}/${file}" || exit 3
  done <<< "$(< /dev/stdin)"
}

print_usage() {
  show_header "Usage: mpv-ssh"
  show_listitem "  -s|--shuffle          flag shuffle streams (default: false)"
  show_listitem "  -r|--remote           IP address of SSH server"
  show_listitem "  -u|--user             SSH user name"
  show_listitem "  -d|--directory        remote directory to search over SSH"
  show_listitem "  -h|--help             print (this) help message"
}


#
# Globals
#

SHUFFLE=false
REMOTE=
USER=
PORT=22
# PROTOCOL=sftp
DIR=
NUM=

#
# Parse command line variables.
#

OPTIONS="d:shn:r:u:"
LONGOPTIONS=dir:,shuffle,help,num:,remote:,user:
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ ${#} -ge 1 ]; do
  case "${1}" in
    -d|--dir)
      DIR="${2}"
      shift 2
      ;;
    -s|--shuffle)
      SHUFFLE=true
      shift
      ;;
    -h|--help)
      print_usage
      exit
      ;;
    -n|--num)
      NUM="${2}"
      shift 2
      ;;
    -u|--user)
      USER="${2}"
      shift 2
      ;;
    -r|--remote)
      REMOTE="${2}"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: Unknown argument ${1@Q}. Exiting."
      exit 3
      ;;
  esac
done


#
# Main
#

if [ -z "${USER}" ]; then
  show_error "ERROR: SSH user not specified. Exiting."
  exit 3
fi

if [ -z "${REMOTE}" ]; then
  show_error "ERROR: No remote IP address given. Exiting."
  exit 3
fi

if [ -z "${DIR}" ]; then
  show_error "ERROR: No path specified. Exiting."
  exit 3
fi

if "${SHUFFLE}"; then
  print_list | head -n "${NUM:--0}" | make_filename | \
    mpv --shuffle --playlist=- --load-unsafe-playlists --prefetch-playlist=yes
else
  # `find` output is not in any particular order, so pipe though `sort` first
  print_list | sort -V | head -n "${NUM:--0}" | make_filename | \
    mpv --playlist=- --load-unsafe-playlists --prefetch-playlist=yes
fi
