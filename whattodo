#! /bin/bash
set -euo pipefail
source globals

#
# Globals
#

# File name(s) that contain todo lists.
FILES=({TODO,TO-DO}{.md,.txt,.rtf})

# Extra hard-coded files not in ${projectsdir} (can be left empty).
EXTRAS=({"${HOME}/Desktop/","${HOME}/"}{TODO,TO-DO}{.md,.txt,.rtf})

# Directories to ignore when searching for lists. Redundant with
# $ignoreprojectdirs variable.
IGNORES=("node_modules")


#
# Functions
#

function print_todo {
  local file="${1}"
  show_info "${file}"
  cat "${file}"
  echo && echo
}

function find_todo {
  local file
  local files
  local ignore
  local ignores
  local cmd

  for file in "${FILES[@]}"; do
    if [[ ! -v files ]]; then
      files="-iname ${file}"
    else
      files="${files} -o -iname ${file}"
    fi
  done

  for ignore in "${IGNORES[@]}"; do
    if [[ ! -v ignores ]]; then
      ignores="-path \"*${ignore}*\""
    else
      ignores="${ignores} -o -path \"*${ignore}*\""
    fi
  done

  if [ "${#ignoreprojectdirs[@]}" -gt 0 ]; then
    for ignore in "${ignoreprojectdirs[@]}"; do
    if [[ ! -v ignores ]]; then
      ignores="-path \"*${ignore}*\""
    else
      ignores="${ignores} -o -path \"*${ignore}*\""
    fi
    done
  fi

  cmd="find ${projectdir@Q} \( ${ignores} \) -prune -o \( ${files} \) -print"
  eval "${cmd}"
}

function find_extra_todo {
  local todo
  for todo in "${EXTRAS[@]}"; do
    if [ -f "${todo}" ]; then
      print_todo "${todo}"
    fi
  done
}


#
# Main
#

# Check that required globals are set.
if [[ -v projectdir ]] && [[ -v ignoreprojectdirs ]]; then
  if [[ -z "${projectdir}" ]]; then
    show_warning "WARNING: 'projectdir' unset in globals. Searching ${HOME@Q}."
    projectdir="${HOME}"
  fi
else
  exit 1
fi

find_todo
find_extra_todo
