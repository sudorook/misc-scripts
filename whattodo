#! /bin/bash
set -euo pipefail
source globals

! check_command find && exit 3

#
# Globals
#

# File name(s) that contain todo lists.
FILES=({TODO,TO-DO}{.md,.txt,.rtf})

# Extra hard-coded files not in ${projectsdir} (can be left empty).
EXTRAS=({"${HOME}/Desktop/","${HOME}/"}{TODO,TO-DO}{.md,.txt,.rtf})

# Directories to ignore when searching for lists. Redundant with
# ${ignoreprojectdirs} variable in globals.
IGNORES=("node_modules")
IGNORES+=("${ignoreprojectdirs[@]:-}")

# Base directory to search for to-do lists. Uses the ${projectdir} variable in
# globals by default, with ${HOME} as a fallback if unset.
PROJECTDIR="${projectdir:-${HOME}}"

#
# Functions
#

function print_todo {
  local file="${1}"
  show_header "${file//${HOME}\//}"
  cat "${file}"
  echo && echo
}
export -f print_todo

# Search every directory in ${PROJECTDIR} for a file matching one in ${FILES}
# as long as it is not also specified in ${IGNORES}.
function find_todo {
  local file
  local files
  local ignore
  local ignores
  local cmd

  for file in "${FILES[@]}"; do
    files="${files:+${files} -o }-iname ${file}"
  done

  for ignore in "${IGNORES[@]}"; do
    ignores="${ignores:+${ignores} -o }-name ${ignore@Q}"
  done

  cmd="find ${PROJECTDIR@Q} \( ${ignores} \) -prune , \( ${files} \) -exec bash -c 'print_todo \"\${1}\"' bash {} \;"
  eval "${cmd}"
}

# Print out the to-do lists manually specified in ${EXTRAS}
function find_extra_todo {
  local todo
  for todo in "${EXTRAS[@]}"; do
    if [ -f "${todo}" ]; then
      print_todo "${todo}"
    fi
  done
}

#
# Main
#

[ ${#} -gt 0 ] && show_warning "WARNING: Ignoring parameters ${*}." >&2

find_todo
find_extra_todo
