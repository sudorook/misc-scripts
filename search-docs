#! /bin/bash
set -euo pipefail

ROOT="$(dirname "${0}")"

source "${ROOT}"/globals

! check_command find fzf sed && exit 3

#
# Functions
#

function print_usage {
  show_header Usage:
  cat << EOF
  -p|--pin   pin selected file(s) to ~/Desktop and ~/Sync (default: false)
  -h|--help  print (this) message
EOF
}

function get_common_root {
  if [ ${#DIRS[@]} -eq 1 ]; then
    ROOT="${DIRS[0]}"
    DIRS=(".")
  else
    local root="${DIRS[0]}"
    local cur
    for cur in "${DIRS[@]}"; do
      root="$(printf "%s\n%s\n" "${root}" "${cur}" |
              sed -e 'N;s,^\(.*\).*\n\1.*$,\1,')"
    done
    ROOT="${root%%\/}"
  fi

  local dir
  local new_dirs=()
  for dir in "${DIRS[@]}"; do
    if [[ "${dir}" = "${ROOT}" ]]; then
      DIRS=(".")
      return
    else
      new_dirs+=("${dir##"${ROOT}"\/}")
    fi
  done
  DIRS=("${new_dirs[@]}")
}

function check_dirs {
  local dir
  local dirs=()
  for dir in "${DIRS[@]}"; do
    if [ -z "${dir}" ]; then
      continue
    elif [ -d "${dir}" ]; then
      dirs+=("${dir}")
    elif [ -s "${dir}" ]; then
      if [ -d "$(readlink -f "${dir}")" ]; then
        dirs+=("${dir}")
      fi
    else
      show_warning "WARNING: ${dir@Q} not found."
    fi
  done
  DIRS=("${dirs[@]}")
}

function pick_file {
  pushd "${ROOT}" > /dev/null
  find -L "${DIRS[@]}" -type f -path "*.caltrash*" -prune -o \
    \( -iname "*.mobi" \
      -o -iname "*pdf" \
      -o -iname "*.azw3" \
      -o -iname "*.html" \
      -o -iname "*.epub" \
    \) -print |
    fzf --layout=reverse --header-first -m
  popd > /dev/null
}

function get_title_calibre {
  local file="${1}"
  local dir
  local meta
  dir="$(dirname "${file}")"
  meta="${dir}/metadata.opf"

  if [ -f "${meta}" ]; then
    sed -n "s|\s*<dc:title>\(.*\)</dc:title>|\1|p" "${meta}"
  fi
}

function get_title_pdfinfo {
  local file="${1}"
  if check_command pdfinfo; then
    pdfinfo "${file}" | sed -n "s,^Title:\s\+\(.*\),\1,p"
  fi
}

function get_title_ebook-meta {
  local file="${1}"
  if check_command ebook-meta; then
    ebook-meta "${file}" | sed -n "s,^Title\s\+:\s\+\(.*\),\1,p"
  fi
}

function get_title_html {
  local file="${1}"
  sed '/\s*<body>/Iq' "${file}" |
    sed ':a;N;$!ba;s/\n//g' |
    sed -n "s,.*<title>\s*\(.\+\)\s*</title>.*,\1,Ip" |
    sed -e "s/&amp;/\&/g" -e "s,&lt;,<,g" -e "s,&gt;,>,g" \
      -e "s,<strong>,,Ig" -e "s,</strong>,,Ig" \
      -e "s,<code>,,Ig" -e "s,</code>,,Ig"
}

function sanitize_string {
  sed \
    -e "s/: / - /g" \
    -e "s/\"/'/g" \
    -e "s/[<>|?\*\\\/]//g"
}

function get_title {
  local file
  local file_name
  local file_ext
  local title

  file="$(basename "${1}")"
  file_name="${file%.*}"
  file_ext="${file##*.}"

  title="$(get_title_calibre "${1}")"
  if [ -z "${title}" ]; then
    case "${file_ext,,}" in
      pdf)
        title="$(get_title_pdfinfo "${1}")"
        ;;
      epub)
        title="$(get_title_epub-meta "${1}")"
        ;;
      html)
        title="$(get_title_html "${1}")"
        ;;
    esac
  fi
  if [ -z "${title}" ] || [[ "${title}" =~ .dvi$ ]]; then
    title="$(echo "${file_name}" |
             sed -n "s/\(.\+ - \)\?\([0-9]\+ - \)\(.*\)/\3/p")"
  fi
  if [ -z "${title}" ] || [[ "${title}" =~ .dvi$ ]]; then
    title="$(echo "${file_name}" |
             sed -e "s,.\+ - \(.\+\),\1,g" -e "s,\(.\+\)_.*,\1,g")"
  fi
  if [ -n "${title}" ]; then
    echo "${title}.${file_ext}" | sanitize_string
  else
    echo "${file}" | sanitize_string
  fi
}

function pin_and_sync {
  local file_in="${1}"
  local file_out
  file_out="$(get_title "${file_in}")"

  if [ -f "${HOME}/Sync/${file_out}" ]; then
    show_warning "WARNING: '~/Sync/${file_out}' already exists. Skipping."
  else
    cp "${file_in}" "${HOME}/Sync/${file_out}"
  fi
  pushd "${HOME}/Desktop" > /dev/null
  if [ -e "${file_out}" ]; then
    show_warning "WARNING: '~/Desktop/${file_out}' already exists. Skipping."
  else
    ln -s ../Sync/"${file_out}" "${file_out}"
  fi
  popd > /dev/null
}

function open {
  local file="${1}"
  local file_ext="${file##*.}"

  case "${file_ext}" in
    epub | mobi | azw3)
      if check_command ebook-viewer; then
        ebook-viewer --detach "${file}"
      fi
      ;;
    pdf | djvu)
      if check_command okular; then
        (okular "${file}" > /dev/null 2>&1 &)
      elif check_command evince; then
        (evince "${file}" > /dev/null 2>&1 &)
      fi
      ;;
    html)
      if [[ -v BROWSER ]]; then
        ("${BROWSER}" "${file}" > /dev/null 2>&1 &)
      else
        show_warning "\$BROWSER not set. Skipping ${file@Q}."
      fi
      ;;
    *)
      show_warning "${file_ext@Q} files are not supported. Skipping ${file@Q}."
      ;;
  esac
}

#
# Globals
#

DIRS=(
  "${calibrelibrarydir:-""}"
  "${zoterodatadir:+"${zoterodatadir}"/storage}"
)
PIN=false
ROOT="${HOME}"

#
# Main
#

OPTIONS=hp
LONGOPTIONS=help,pin
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ ${#} -ge 1 ]; do
  case "${1}" in
    -h | --help)
      print_usage
      exit
      ;;
    -p | --pin)
      PIN=true
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "Error"
      exit 3
      ;;
  esac
done

#
# Main
#

check_dirs
if [ "${#DIRS[@]}" -eq 0 ]; then
  exit 3
fi

get_common_root
if [ -z "${ROOT}" ] || ! [ -d "${ROOT}" ]; then
  show_error "ERROR: Parsing common parent directory failed. Exiting."
  exit 3
fi

pushd "${ROOT}" > /dev/null
while read -r FILE; do
  if [ -z "${FILE}" ]; then
    continue
  elif ! [ -f "${ROOT}/${FILE}" ]; then
    show_error "ERROR: Parsing ${FILE@Q} failed. Skipping."
  else
    if "${PIN}"; then
      pin_and_sync "${FILE}"
    else
      open "${FILE}"
    fi
  fi
done <<< "$(pick_file)"
popd > /dev/null
