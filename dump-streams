#! /bin/bash
set -euo pipefail
source globals

! check_command ffmpeg ffprobe && exit 3

if ! [ -f "$1" ]; then
  show_error "ERROR: invalid input $1. Exiting."
fi

function get_stream_count {
  ffprobe -v error -show_format "${1}" | \
    sed -n "s/nb_streams=\([0-9]\+\)/\1/p" 2>/dev/null
}

function pick_container {
  local format
  local format_name
  local container_type

  format="$(ffprobe -v error -show_format "$1")"
  format_name="$(echo "$format" | sed -n "s/^format_name=\(.*\)/\1/p")"

  if [[ "${format_name}" =~ matroska ]]; then
    container_type=mkv
  elif [[ "${format_name}" =~ mp4 ]]; then
    container_type=mp4
  else
    container_type=avi
  fi

  echo "${container_type}"
}

function dump_stream {
  local info
  local codec_name
  local codec_type
  local container
  local font_file
  local in
  in="$(basename "${1}")"
  local name=${in%.*}
  local idx="${2}"

  info="$(ffprobe -v error -show_entries stream -select_streams "$idx" "$1")"
  codec_name="$(echo "$info" | sed -n "s/^codec_name=\(.*\)/\1/p")"
  codec_type="$(echo "$info" | sed -n "s/^codec_type=\(.*\)/\1/p")"

  case "${codec_type}" in
    video)
      container="$(pick_container "${1}")"
      cmd="ffmpeg -v warning -i \"${1}\" -map 0:${idx} -c copy \"${name}_${idx}.${container}\" -y"
      eval "${cmd}"
      return
      ;;
    audio|subtitle)
      cmd="ffmpeg -v warning -i \"${1}\" -map 0:${idx} -c copy \"${name}_${idx}.${codec_name}\" -y"
      eval "${cmd}"
      return
      ;;
    attachment)
      if [[ "${codec_name}" =~ ^[o|t]tf ]]; then
        mkdir -p "${name}_fonts"
        font_file="$(echo "$info" | sed -n "s/^TAG:filename=\(.*\)/\1/p")"
        cmd="ffmpeg -v warning -dump_attachment:$idx \"\" -i \"${1}\" -y"
        eval "${cmd}"
        mv "${font_file}" "${name}_fonts"
      fi
      return
      ;;
  esac
}

STREAM_N="$(get_stream_count "${1}")"
for i in $(seq 1 "${STREAM_N}"); do
  dump_stream "${1}" "$((i - 1))"
done
