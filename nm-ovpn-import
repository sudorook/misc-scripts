#!/bin/bash

# SPDX-FileCopyrightText: 2020 - 2024 sudorook <daemon@nullcodon.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

set -Eeuo pipefail

ROOT="$(dirname "${0}")"

source "${ROOT}"/globals

! check_command grep nmcli systemctl && exit 3

# Script requires nm-cli, so check that the Network Manager service is running.
if ! systemctl is-active --quiet NetworkManager; then
  show_info "Enabling Network Manager systemd service."
  sudo systemctl enable --now NetworkManager
fi

# Check that the input files exist.
for VPN_CONFIG in "${@}"; do
  if ! [ -f "${VPN_CONFIG}" ]; then
    show_error "ERROR: config ${VPN_CONFIG} not found. Exiting."
    exit 3
  fi
done

TMP_DIR="$(mktemp -d)"
mkdir -p "${TMP_DIR}"
trap 'rm -rf "${TMP_DIR}"; exit' INT TERM ERR EXIT

# Prompt for the VPN username.
VPN_USER=$(ask_question "Username:")
VPN_PASS=$(ask_secret "Password:")
echo

for VPN_CONFIG in "$@"; do
  if [[ "${VPN_CONFIG}" =~ \.ovpn$ ]]; then
    VPN_NAME="${VPN_CONFIG%.*}"
  else
    VPN_NAME="${VPN_CONFIG}"
  fi

  # Delete any existing VPN configuration.
  if grep -q "${VPN_NAME}" <(nmcli conn show); then
    show_info "Deleting existing OVPN config for ${VPN_NAME}..."
    nmcli connection delete "${VPN_NAME}"
    # ask_question "Delete existing OVPN config? (y/N)" REPLY
    # if [[ "${REPLY}" =~ ^([Yy]$|[Yy][Ee][Ss]$) ]]; then
    #   nmcli connection delete "${VPN_NAME}"
    # fi
  fi

  # Import the ovpn configs and set the username.
  cp "${VPN_CONFIG}" "${TMP_DIR}/${VPN_NAME}"
  nmcli connection import type openvpn file "${TMP_DIR}/${VPN_NAME}"
  nmcli connection modify "${VPN_NAME}" +vpn.data "username = ${VPN_USER}"
  if [[ -n "${VPN_PASS}" ]]; then
    nmcli connection modify "${VPN_NAME}" +vpn.secrets "password = ${VPN_PASS}"
  fi
done

show_success "Done!"
