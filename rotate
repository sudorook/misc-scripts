#! /bin/bash
set -euo pipefail
source globals

! check_command xrandr dconf && exit 3


function print_usage {
  show_header "Usage:"
  echo "  -i|--input         display ID"
  echo "  -r|--rotation      rotation (left, right, normal, or inverted)"
}

function display_connected {
  if xrandr | grep "^${ID} connected" >/dev/null; then
    return 0
  else
    return 1
  fi
}

function get_primary_display_info_xrandr {
  local info
  if [[ -v 1 ]] && [[ -n "${1}" ]]; then
    info="$(xrandr -q | \
            grep "^${1} connected" | \
            sed -n "s/\([A-Za-z0-9\-]\+\) connected \(primary \)\?\([0-9]\+\)x\([0-9]\+\)[0-9+]\+ \([a-z]\+\)\?.*/\1|\3|\4|\5/p")"
  else
    info="$(xrandr -q | \
            grep "connected primary" | \
            sed -n "s/\([A-Za-z0-9\-]\+\) connected primary \([0-9]\+\)x\([0-9]\+\)[0-9+]\+ \([a-z]\+\)\?.*/\1|\2|\3|\4/p")"
  fi
  if ! [ -n "${info}" ]; then
    show_error "ERROR: Failed to parse display info. Exiting."
    exit 3
  fi
  ID="$(cut -d"|" -f1 <<< "${info}")"
  if ! [ -n "${ID}" ]; then
    show_error "ERROR: Could not detect primary display."
    exit 3
  fi
  ROTATION="$(cut -d"|" -f4 <<< "${info}")"
  if ! [ -n "${ROTATION}" ]; then
    show_warning "WARNING: Could not detect primary display rotation. Assuming 'normal'."
    ROTATION=normal
  fi
  case "${ROTATION}" in
    left|right)
      RESOLUTION_X="$(cut -d"|" -f3 <<< "${info}")"
      RESOLUTION_Y="$(cut -d"|" -f2 <<< "${info}")"
      ;;
    inverted|normal)
      RESOLUTION_X="$(cut -d"|" -f2 <<< "${info}")"
      RESOLUTION_Y="$(cut -d"|" -f3 <<< "${info}")"
      ;;
    *)
      show_error "ERROR: unknown rotation ${ROTATION@Q}."
      return
      ;;
  esac
}

function recenter_bleachbit {
  local width
  local height
  local offset_x
  local offset_y
  local config="${HOME}/.config/bleachbit/bleachbit.ini"
  if ! [ -f "${config}" ]; then
    show_warning "WARNING: Bleachbit config file missing. Skipping."
    return
  fi
  width="$(sed -n 's/window_width = \([0-9]\+\)/\1/p' ${config})"
  height="$(sed -n 's/window_height = \([0-9]\+\)/\1/p' ${config})"
  case "${ROTATION}" in
    left|right)
      offset_y=$(((RESOLUTION_X-height-PANEL_OFFSET-20)/2))  # 20 is hard-coded to match default display position
      offset_x=$(((RESOLUTION_Y-width)/2))
      ;;
    inverted|normal)
      offset_x=$(((RESOLUTION_X-width)/2))
      offset_y=$(((RESOLUTION_Y-height-PANEL_OFFSET-20)/2))  # 20 is hard-coded to match default display position
      ;;
    *)
      show_error "ERROR: unknown rotation ${ROTATION@Q}."
      return
      ;;
  esac
  sed -i.bak \
    -e "s/^\(window_width = \)[0-9]\+/\1${width}/g" \
    -e "s/^\(window_height = \)[0-9]\+/\1${height}/g" \
    -e "s/^\(window_x = \)[0-9]\+/\1${offset_x}/g" \
    -e "s/^\(window_y = \)[0-9]\+/\1${offset_y}/g" \
    ${config}
}

function recenter_transmission {
  local width
  local height
  local offset_x
  local offset_y
  local config="${HOME}/.config/transmission/settings.json"
  if ! [ -f "${config}" ]; then
    show_warning "WARNING: Transmission config file missing. Skipping."
    return
  fi
  width="$(sed -n 's/.*"main-window-width": \([0-9]\+\),/\1/p' ${config})"
  height="$(sed -n 's/.*"main-window-height": \([0-9]\+\),/\1/p' ${config})"
  case "${ROTATION}" in
    left|right)
      offset_y=$(((RESOLUTION_X-height-PANEL_OFFSET)/2))
      offset_x=$(((RESOLUTION_Y-width)/2))
      ;;
    inverted|normal)
      offset_x=$(((RESOLUTION_X-width)/2))
      offset_y=$(((RESOLUTION_Y-height-PANEL_OFFSET)/2))
      ;;
    *)
      show_error "ERROR: unknown rotation ${ROTATION@Q}."
      return
      ;;
  esac
  sed -i.bak \
    -e "s/\(.*\"main-window-width\": \)[0-9]\+,/\1${width},/g" \
    -e "s/\(.*\"main-window-height\": \)[0-9]\+,/\1${height},/g" \
    -e "s/\(.*\"main-window-x\": \)[0-9]\+,/\1${offset_x},/g" \
    -e "s/\(.*\"main-window-y\": \)[0-9]\+,/\1${offset_y},/g" \
    ${config}
}

VERTICAL_BG="/usr/share/backgrounds/timed/24-hours-timed.xml"
HORIZONTAL_BG="/usr/share/backgrounds/timed/island-timed.xml"

PANEL_OFFSET=40  # height (in pixels) of the panel

OPTIONS=i:r:h
LONGOPTIONS=input:,rotation:,help
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "$0" -- "$@")
eval set -- "$PARSED"

while [ $# -ge 1 ]; do
  case "$1" in
    -i|--input)
      ID="$2"
      if ! display_connected; then
        show_error "ERROR: display ${ID@Q} not found. Exiting."
        exit 3
      fi
      shift 2
      ;;
    -r|--rotation)
      ROTATION="$2"
      shift 2
      ;;
    -h|--help)
      print_usage
      shift
      break
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: invalid flag ${1@Q}."
      print_usage
      exit 3
      ;;
  esac
done

get_primary_display_info_xrandr "${ID:-}"

case ${ROTATION,,} in
  right)
    xrandr --output "${ID}" --rotate right
    dconf write /org/cinnamon/desktop/background/picture-uri "'file://${VERTICAL_BG}'"
    ;;
  left)
    xrandr --output "${ID}" --rotate left
    dconf write /org/cinnamon/desktop/background/picture-uri "'file://${VERTICAL_BG}'"
    ;;
  normal)
    xrandr --output "${ID}" --rotate normal
    dconf write /org/cinnamon/desktop/background/picture-uri "'file://${HORIZONTAL_BG}'"
    ;;
  inverted)
    xrandr --output "${ID}" --rotate inverted
    dconf write /org/cinnamon/desktop/background/picture-uri "'file://${HORIZONTAL_BG}'"
    ;;
  *)
    show_error "ERROR: invalid rotation ${ROTATION@Q}. Exiting."
    print_usage
    exit 3
    ;;
esac

recenter_bleachbit
recenter_transmission
