#! /bin/bash
set -euo pipefail
source globals

! check_command awk git && exit 3


#
# Functions
#

get_count() {
  local dir
  local cmd
  dir=${1%/*}

  # Git will traverse the entire from HEAD to the first commit where the
  # committer or the author date falls outside the range. This can caused
  # unexpected behavior for merge / rebase / fixup commits, as the committer
  # and author dates will likely not match.
  cmd="git -C ${dir@Q} rev-list --count --branches"
  if [ -n "${AUTHOR}" ] || [ -n "${EMAIL}" ]; then
    cmd="${cmd} --author=^${AUTHOR:-.*}\ \<${EMAIL:-.*}\>$"
  fi
  if [ -n "${SINCE}" ]; then
    cmd="${cmd} --since=$(date -d -"${SINCE}" +%s)"
  fi
  if [ -n "${UNTIL}" ]; then
    cmd="${cmd} --until=$(date -d -"${UNTIL}" +%s)"
  fi
  eval "${cmd}"
}
export -f get_count

print_usage() {
  show_header "Usage: count-commits"
  echo
  show_listitem "  -a|--author  <author>"
  show_listitem "  -e|--email   <email>"
  show_listitem "  -s|--since   <time>"
  show_listitem "  -u|--until   <time>"
  show_listitem "  -h|--help    print (this) help message"
  echo
  show_listitem "<author> = commit author"
  show_listitem "<email>  = committer/author email address"
  show_listitem \
    "<time>   = string (e.g. 1week, 2years, now), passed to 'date' from coreutils"
}

#
# Main
#

SINCE=
UNTIL=
AUTHOR=
EMAIL=

OPTIONS=ha:d:e:s:u:
LONGOPTIONS=help,author:,depth:,email:,since:,until:
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "$0" -- "$@")
eval set -- "$PARSED"

while [ $# -ge 1 ]; do
  case "$1" in
    -a|--author)
      AUTHOR=${2}
      shift 2
      ;;
    -e|--email)
      EMAIL=${2}
      shift 2
      ;;
    -d|--depth)
      DEPTH=${2}
      shift 2
      ;;
    -s|--since)
      SINCE=${2}
      shift 2
      ;;
    -u|--until)
      UNTIL=${2}
      shift 2
      ;;
    -h|--help)
      print_usage
      exit
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: option ${1@Q} unrecognized. Exiting."
      exit 3
      ;;
  esac
done

export AUTHOR
export EMAIL
export SINCE
export UNTIL

projectdir="${projectdir:-$HOME}"
PROJECTDIR=("${@:-$projectdir}")

if [ $# -eq 1 ] && git log >/dev/null 2>&1; then
  get_count "${1}" | awk '{s+=$1}END{print s}'
else
  find -L "${PROJECTDIR[@]}" ${DEPTH:+-maxdepth $DEPTH} -type d -name ".git" \
    -exec bash -c 'get_count "${1}"' bash {} \; | awk '{s+=$1}END{print s}'
fi
