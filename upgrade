#! /bin/bash
set -eu
source globals


#
# Functions
#

function git_update() {
  git -C "${1}" fetch
  h=$(git -C "${1}" rev-parse HEAD)
  u=$(git -C "${1}" rev-parse @{u})
  if [ "$h" = "$u" ]; then
    return 1
  else
    git -C "${1}" merge
    return 0
  fi
}

function upgrade_system() {
  # Arch Linux (pacman)
  command -v pacman >/dev/null 2>&1 && {
    show_header "Upgrading Arch Linux packages."
    sudo sh -c "pacman -Syu && paccache -r && paccache -ruk0"
    echo && return 0
  }

  # Debian, Ubuntu (apt)
  command -v apt >/dev/null 2>&1 && {
    show_header "Upgrading Debian packages."
    sudo sh -c "apt update && apt -y full-upgrade && apt -y autoremove"
    echo && return 0
  }
}

function upgrade_themes() {
  show_header "Upgrading GTK and icon themes."
  if [ -d "${gtkdir}" ]; then
    for dir in ${gtkdir}/*; do
      if [ -d "${dir}" ] && [ -d "${dir}/.git" ]; then
        show_info "$(basename ${dir})"
        git -C ${dir} checkout master && git -C ${dir} pull
        echo
      fi
    done
  fi

  if [ -d "${icondir}" ]; then
    for dir in ${icondir}/*; do
      if [ -d ${dir}/.git ]; then
        show_info "$(basename ${dir})"
        git -C ${dir} checkout master && git -C ${dir} pull
        echo
      fi
    done
  fi

  if [ -d "${thunderbirddir}" ]; then
    show_info "$(basename ${thunderbirddir}) (thunderbird)"
    git -C ${thunderbirddir}/chrome pull
    echo
  fi
}

vimpack=${HOME}/.vim/pack/dist/start
function upgrade_vim_packages() {
  show_header "Upgrading vim plugins."
  if ! command -v vim >/dev/null 2>&1; then
    show_warning "Install vim first. Skipping."
    return
  fi

  if [ -d ${vimpack} ]; then
    for dir in ${vimpack}/*; do
      [ -d ${dir}/.git ] && git -C ${dir} pull
    done
  else
    show_warning "No vim packages found in ${vimpack}. Skipping."
  fi
}

function upgrade_zsh() {
  show_header "Upgrading zsh plugins."
  if ! command -v zsh >/dev/null 2>&1; then
    show_warning "Install zsh first. Skipping."
    return
  fi

  # antigen-update may not be in the bash PATH, so check the zsh path if
  # 'command -v antigen-update' returns false.
  if zsh -ic "command -v antigen-update" >/dev/null 2>&1; then
    zsh -ic "antigen-update"
  else
    if [ -d "${zshdir}" ]; then
      for dir in ${zshdir}/*; do
        [ -d ${dir}/.git ] && git -C ${dir} pull
      done
    else
      show_warning "No zsh plugins found in ${zshdir}. Skipping."
    fi
  fi
}

function upgrade_pkgbuild() {
  command -v makepkg >/dev/null 2>&1 && {
    show_header "Upgrading AUR pkgbuilds."
    for dir in ${pkgbuilddir}/*; do
      if [ -d "${dir}/.git" ]; then
        show_info "$(basename ${dir})"
        if git_update "${dir}"; then
          cur=`pwd`
          cd "${dir}"
          makepkg -si
          cd "${cur}"
        fi
        echo
      fi
    done
  }
}


#
# Main
#

OPTIONS=ajpstvz
LONGOPTIONS=all,pkgbuild,system,theme,vim,zsh
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n ${0} -- ${@})
eval set -- ${PARSED}

while [ ${#} -ge 1 ]; do
  case ${1} in
    -a|--all)
      upgrade_system
      upgrade_themes
      upgrade_pkgbuild
      upgrade_zsh
      shift
      break
      ;;
    -p|--pkgbuild)
      upgrade_pkgbuild
      shift
      ;;
    -s|--system)
      upgrade_system
      shift
      ;;
    -t|--theme)
      upgrade_themes
      shift
      ;;
    -v|--vim)
      upgrade_vim_packages
      shift
      ;;
    -z|--zsh)
      upgrade_zsh
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "Error: invalid flag."
      exit 3
      ;;
  esac
done
