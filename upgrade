#! /bin/bash
set -eu
source globals


#
# Functions
#

function git_update() {
  git -C "${1}" fetch
  h=$(git -C "${1}" rev-parse HEAD)
  u=$(git -C "${1}" rev-parse @{u})
  if [ "$h" = "$u" ]; then
    return 1
  else
    git -C "${1}" merge
    return 0
  fi
}

function print_usage() {
  show_header "Options:"
  show_listitem " -j|--julia     upgrade Julia packages"
  show_listitem " -p|--pkgbuild  upgrade AUR pkgbuilds in ${pkgbuilddir}"
  show_listitem " -s|--system    upgrade system packages (pacman or apt)"
  show_listitem " -t|--themes    upgrade GTK/icon themes in ${gtkdir}"
  show_listitem "                  and ${icondir}"
  show_listitem " -v|--vim       upgrade Git-versioned Vim packages installed"
  show_listitem "                  in ${vimpack}"
  show_listitem " -w|--weechat   upgrade wee-slack plugin for weechat"
  show_listitem " -z|--zsh       upgrade Zsh plugins in ${zshdir}"
}

function upgrade_system() {
  # Arch Linux (pacman)
  command -v pacman >/dev/null 2>&1 && {
    show_header "Upgrading Arch Linux packages."
    sudo -k sh -c "pacman -Syu && paccache -r && paccache -ruk0"
    echo && return 0
  }

  # Debian, Ubuntu (apt)
  command -v apt >/dev/null 2>&1 && {
    show_header "Upgrading Debian packages."
    sudo -k sh -c "apt update && apt -y full-upgrade && apt -y autoremove"
    echo && return 0
  }
}

function upgrade_themes() {
  show_header "Upgrading GTK and icon themes."
  if [ -d "${gtkdir}" ]; then
    for dir in "${gtkdir}"/*; do
      if [ -d "${dir}" ] && [ -d "${dir}/.git" ]; then
        show_info "$(basename ${dir})"
        git -C "${dir}" checkout master && git -C "${dir}" pull origin master
        echo
      fi
    done
  fi

  if [ -d "${icondir}" ]; then
    for dir in "${icondir}"/*; do
      if [ -d "${dir}/.git" ]; then
        show_info "$(basename ${dir})"
        git -C "${dir}" checkout master && git -C "${dir}" pull origin master
        echo
      fi
    done
  fi

  if [ -d "${thunderbirddir}" ]; then
    show_info "$(basename ${thunderbirddir}) (thunderbird)"
    git -C "${thunderbirddir}/chrome" pull origin master
    echo
  fi
}

vimpack=${HOME}/.vim/pack/dist/start
function upgrade_vim_packages() {
  show_header "Upgrading vim plugins."
  if ! command -v vim >/dev/null 2>&1; then
    show_warning "Install vim first. Skipping."
    echo
    return
  fi

  if [ -d "${vimpack}" ]; then
    for dir in "${vimpack}"/*; do
      if [ -d "${dir}/.git" ]; then
        show_info "$(basename ${dir})"
        git -C "${dir}" pull origin master
        echo
      fi
    done
  else
    show_warning "No vim packages installed in ${vimpack}. Skipping."
    echo
  fi
}

function upgrade_zsh() {
  show_header "Upgrading zsh plugins."
  if ! command -v zsh >/dev/null 2>&1; then
    show_warning "Install zsh first. Skipping."
    echo
    return
  fi

  # antigen-update may not be in the bash PATH, so check the zsh path if
  # 'command -v antigen-update' returns false.
  if zsh -ic "command -v antigen-update" >/dev/null 2>&1; then
    zsh -ic "antigen-update"
  else
    if [ -d "${zshdir}" ]; then
      for dir in "${zshdir}"/*; do
        if [ -d "${dir}/.git" ]; then
          show_info "$(basename ${dir})"
          git -C "${dir}" pull origin master
          echo
        fi
      done
    else
      show_warning "No zsh plugins found in ${zshdir}. Skipping."
    fi
  fi
}

function upgrade_julia_packages() {
  show_header "Upgrading Julia packages."
  if ! command -v julia >/dev/null 2>&1; then
    show_warning "Install julia first. Skipping."
    echo
    return
  fi

  julia -e "using Pkg; Pkg.update()"
  echo
}

function upgrade_pkgbuild() {
  command -v makepkg >/dev/null 2>&1 && {
    show_header "Upgrading AUR pkgbuilds."
    for dir in "${pkgbuilddir}"/*; do
      if [ -d "${dir}/.git" ]; then
        show_info "$(basename ${dir})"
        if git_update "${dir}"; then
          cur=$(pwd)
          cd "${dir}"
          makepkg -s --noconfirm
          sudo pacman -U "${dir}*.tar.xz"
          git clean -xdf
          cd "${cur}"
        fi
        echo
      fi
    done
  }
}

weechatdir=${HOME}/.weechat/plugins
function upgrade_weechat_plugins {
  show_header "Upgrading weechat plugins."
  for dir in "${weechatdir}"/*; do
    if [ -d "${dir}/.git" ]; then
      show_info "$(basename ${dir})"
      git -C "${dir}" pull origin master
      echo
    fi
  done
}

#
# Main
#

OPTIONS=ahjpstvwz
LONGOPTIONS=all,help,julia,pkgbuild,system,theme,vim,weechat,zsh
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n ${0} -- ${@})
eval set -- ${PARSED}

while [ ${#} -ge 1 ]; do
  case ${1} in
    -a|--all)
      upgrade_system
      upgrade_julia_packages
      upgrade_pkgbuild
      upgrade_themes
      upgrade_vim_packages
      upgrade_weechat_plugins
      upgrade_zsh
      shift
      break
      ;;
    -h|--help)
      print_usage
      shift
      ;;
    -j|--julia)
      upgrade_julia_packages
      shift
      ;;
    -p|--pkgbuild)
      upgrade_pkgbuild
      shift
      ;;
    -s|--system)
      upgrade_system
      shift
      ;;
    -t|--theme)
      upgrade_themes
      shift
      ;;
    -v|--vim)
      upgrade_vim_packages
      shift
      ;;
    -w|--weechat)
      upgrade_weechat_plugins
      shift
      ;;
    -z|--zsh)
      upgrade_zsh
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "Error: invalid flag."
      exit 3
      ;;
  esac
done
