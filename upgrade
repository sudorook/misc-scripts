#! /bin/bash
set -eu
source globals

! check_command git && exit 3

#
# Functions
#

function git_update() {
  if [ -z "$(git -C "${1}" remote)" ]; then
    show_warning "No remote is configured. Skipping..."
    return 1
  fi
  git -C "${1}" checkout master
  git -C "${1}" fetch --tags -f
  h=$(git -C "${1}" rev-parse HEAD)
  u=$(git -C "${1}" rev-parse @{u})
  if [ "$h" = "$u" ]; then
    return 1
  else
    git -C "${1}" merge
    return 0
  fi
}

function print_usage() {
  show_header "Options:"
  show_listitem " -j|--julia     upgrade Julia packages"
  show_listitem " -r|--rust     upgrade Rust via rustup"
  show_listitem " -p|--pkgbuild  upgrade AUR pkgbuilds in ${pkgbuilddir:-}"
  show_listitem " -s|--system    upgrade system packages (pacman or apt)"
  show_listitem " -t|--themes    upgrade GTK/icon themes in ${gtkdir:-} and ${icondir:-}"
  show_listitem " -v|--vim       upgrade Git-versioned Vim packages installed in ${vimpack:-}"
  show_listitem " -n|--nvim      upgrade Git-versioned Neovim packages installed in ${nvimpack:-}"
  show_listitem " -w|--weechat   upgrade wee-slack plugin for weechat in ${weechatdir:-}"
  show_listitem " -z|--zsh       upgrade Zsh plugins in ${zshdir:-}"
}

function upgrade_system() {
  # Arch Linux (pacman)
  command -v pacman >/dev/null 2>&1 && {
    show_header "Upgrading Arch Linux packages."
    sudo -k sh -c "pacman -Syu && paccache -r && paccache -ruk0"
    echo && return 0
  }

  # Debian, Ubuntu (apt)
  command -v apt >/dev/null 2>&1 && {
    show_header "Upgrading Debian packages."
    sudo -k sh -c "apt update && apt -y full-upgrade && apt -y autoremove"
    echo && return 0
  }
}

function upgrade_themes() {
  show_header "Upgrading GTK and icon themes."
  local repo_name
  local dir

  if [[ -v gtkdir ]] && [ -d "${gtkdir}" ]; then
    for dir in "${gtkdir}"/*; do
      if git -C "${dir}" rev-parse 2>/dev/null; then
        repo_name="$(basename "${dir}")"
        show_info "${repo_name}"
        if git_update "${dir}"; then
          if git -C "${dir}" show-ref --verify --quiet "refs/heads/tweak"; then
            pushd "${dir}" >/dev/null
            git checkout tweak
            git rebase master
            git checkout master
            popd >/dev/null
          fi
        fi
        sleep 2
        echo
      fi
    done
  fi

  if [[ -v icondir ]] && [ -d "${icondir}" ]; then
    for dir in "${icondir}"/*; do
      if git -C "${dir}" rev-parse 2>/dev/null; then
        repo_name="$(basename "${dir}")"
        show_info "${repo_name}"
        if git_update "${dir}"; then
          case "${repo_name}" in
            papirus-icon-theme)
              if git -C "${dir}" show-ref --verify --quiet "refs/heads/tweak"; then
                pushd "${dir}" >/dev/null
                git checkout tweak
                git reset HEAD~1
                git reset --hard
                git clean -xdf
                git rebase master
                tools/_restore_adapta_icons.sh
                sync
                git add .
                git commit -m "Mirror updates to Adapta icon set."
                git checkout master
                popd >/dev/null
              fi
              ;;
            *)
              if git -C "${dir}" show-ref --verify --quiet "refs/heads/tweak"; then
                pushd "${dir}" >/dev/null
                git checkout tweak
                git rebase master
                git checkout master
                popd >/dev/null
              fi
              ;;
          esac
        fi
        sleep 2
        echo
      fi
    done
  fi

  if [[ -v thunderbirddir ]] && [[ -d "${thunderbirddir}" ]]; then
    show_info "$(basename "${thunderbirddir}") (thunderbird)"
    git -C "${thunderbirddir}/chrome" pull --ff-only origin master
    sleep 2
    echo
  fi
}

function upgrade_extra() {
  show_header "Running extra upgrade script(s)."
}

vimpack=${HOME}/.vim/pack/dist/start
function upgrade_vim_packages() {
  show_header "Upgrading Vim plugins."
  local dir
  if ! command -v vim >/dev/null 2>&1; then
    show_warning "Install Vim first. Skipping."
    echo
  else
    if [ -d "${vimpack}" ]; then
      for dir in "${vimpack}"/*; do
        if git -C "${dir}" rev-parse 2>/dev/null; then
          show_info "$(basename "${dir}")"
          git_update "${dir}" || true
          sleep 2
          echo
        fi
      done
    else
      show_warning "${vimpack@Q} does not exist. Skipping."
      echo
    fi
  fi
}

nvimpack=${HOME}/.config/nvim/pack/dist/start
function upgrade_nvim_packages() {
  show_header "Upgrading Neovim plugins."
  local dir
  if ! command -v nvim >/dev/null 2>&1; then
    show_warning "Install Neovim first. Skipping."
    echo
  else
    if [ -d "${nvimpack}" ]; then
      for dir in "${nvimpack}"/*; do
        if git -C "${dir}" rev-parse 2>/dev/null; then
          show_info "$(basename "${dir}")"
          git_update "${dir}" || true
          sleep 2
          echo
        fi
      done
    else
      show_warning "${nvimpack@Q} does not exist. Skipping."
      echo
    fi
  fi
}

function upgrade_zsh() {
  show_header "Upgrading zsh plugins."
  local dir
  if ! command -v zsh >/dev/null 2>&1; then
    show_warning "Install zsh first. Skipping."
    echo
  else
    # antigen-update may not be in the bash PATH, so check the zsh path if
    # 'command -v antigen-update' returns false.
    if zsh -ic "command -v antigen-update" >/dev/null 2>&1; then
      zsh -ic "antigen-update"
      sleep 2
    else
      if [[ -v zshdir ]] && [ -d "${zshdir}" ]; then
        for dir in "${zshdir}"/*; do
          if git -C "${dir}" rev-parse 2>/dev/null; then
            show_info "$(basename "${dir}")"
            git -C "${dir}" pull --ff-only origin master --tags
            sleep 2
            echo
          fi
        done
      else
        show_warning "No zsh plugins found in ${zshdir}. Skipping."
      fi
    fi
  fi
}

function upgrade_julia_packages() {
  show_header "Upgrading Julia packages."
  if ! command -v julia >/dev/null 2>&1; then
    show_warning "Install julia first. Skipping."
  else
    julia -e "using Pkg; Pkg.update()"
    sleep 2
  fi

  echo
}

function upgrade_rust() {
  show_header "Upgrading Rust compiler and components."
  if ! command -v rustup >/dev/null 2>&1; then
    show_warning "Install rustup first. Skipping."
  else
    rustup update
    sleep 2
  fi

  echo
}

function upgrade_pkgbuild() {
  command -v makepkg >/dev/null 2>&1 && {
    show_header "Upgrading AUR pkgbuilds."
    local dir
    if [[ -v pkgbuilddir ]] && [[ -d "${pkgbuilddir}" ]]; then
      for dir in "${pkgbuilddir}"/*; do
        if git -C "${dir}" rev-parse 2>/dev/null; then
          show_info "$(basename "${dir}")"
          if git_update "${dir}"; then
            pushd "${dir}" >/dev/null
            makepkg -si --noconfirm
            git clean -xdf
            git reset --hard
            popd >/dev/null
          fi
          sleep 2
          echo
        fi
      done
    fi
  }
}

weechatdir=${HOME}/.weechat/plugins
function upgrade_weechat_plugins {
  show_header "Upgrading weechat plugins."
  local dir
  if [ -d "${weechatdir}" ]; then
    for dir in "${weechatdir}"/*; do
      if git -C "${dir}" rev-parse 2>/dev/null; then
        show_info "$(basename "${dir}")"
        git -C "${dir}" pull --ff-only origin master --tags
        sleep 2
        echo
      fi
    done
  fi
}

#
# Main
#

OPTIONS=ahjrpstnvwxz
LONGOPTIONS=all,help,julia,rust,pkgbuild,system,theme,nvim,vim,weechat,extra,zsh
PARSED=$(getopt -o "${OPTIONS}" --long "${LONGOPTIONS}" -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ ${#} -ge 1 ]; do
  case ${1} in
    -a|--all)
      upgrade_system
      upgrade_julia_packages
      upgrade_rust
      upgrade_pkgbuild
      upgrade_themes
      upgrade_vim_packages
      upgrade_nvim_packages
      upgrade_weechat_plugins
      upgrade_zsh
      upgrade_extra
      shift
      break
      ;;
    -h|--help)
      print_usage
      exit
      shift
      ;;
    -j|--julia)
      upgrade_julia_packages
      shift
      ;;
    -r|--rust)
      upgrade_rust
      shift
      ;;
    -p|--pkgbuild)
      upgrade_pkgbuild
      shift
      ;;
    -s|--system)
      upgrade_system
      shift
      ;;
    -t|--theme)
      upgrade_themes
      shift
      ;;
    -n|--nvim)
      upgrade_nvim_packages
      shift
      ;;
    -v|--vim)
      upgrade_vim_packages
      shift
      ;;
    -w|--weechat)
      upgrade_weechat_plugins
      shift
      ;;
    -z|--zsh)
      upgrade_zsh
      shift
      ;;
    -x|--extra)
      upgrade_extra
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "Error: invalid flag."
      exit 3
      ;;
  esac
done
