#!/bin/bash

# SPDX-FileCopyrightText: 2021 - 2024 sudorook <daemon@nullcodon.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

set -euo pipefail

ROOT="$(dirname "${0}")"

source "${ROOT}"/globals

# Generate an ffmpeg format string to add all the fonts in a directory to a
# video container. String will specify the stream index numbers.
function make_string_v1 {
  local fontstring=""
  local fonttype
  local count=0

  for fontfile in "${1}"/*; do
    fonttype="$(file "${fontfile}" |
                sed -n "s|^${fontfile}: \([A-Za-z]\+\) [F|f]ont .*|\1|p")"
    if [[ "${fonttype}" = "OpenType" ]]; then
      fontstring+="-attach \"${fontfile}\" -metadata:s:t:${count} mimetype=application/vnd.ms-opentype "
      count=$((count + 1))
    elif [[ "${fonttype}" = "TrueType" ]]; then
      fontstring+="-attach \"${fontfile}\" -metadata:s:t:${count} mimetype=application/x-truetype-font "
      count=$((count + 1))
    fi
  done
  echo "${fontstring}"
}

# Generate an ffmpeg format string to add all the fonts in a directory to a
# video container.
function make_string_v2 {
  local fontstring=""
  local fonttype

  for fontfile in "${1}"/*; do
    fonttype="$(file "${fontfile}" |
                sed -n "s|^${fontfile}: \([A-Za-z]\+\) [F|f]ont .*|\1|p")"
    if [[ "${fonttype}" = "OpenType" ]]; then
      fontstring+="-attach \"${fontfile}\" -metadata:s:t mimetype=application/vnd.ms-opentype "
    elif [[ "${fonttype}" = "TrueType" ]]; then
      fontstring+="-attach \"${fontfile}\" -metadata:s:t mimetype=application/x-truetype-font "
    fi
  done
  echo "${fontstring}"
}

# Generate an ffmpeg format string to add any the fonts in a directory to a
# video container if the font isn't already found it it. String will specify
# the stream index numbers.
#
# FIXME: incremting counts from 0 will result in a string that removes fonts in
# the container and adds those that aren't, which isn't useful.
function make_string_v3 {
  local data
  local fontstring=""
  local fonttype
  local fontpath
  local fontfile
  local count=0

  data="$(ffprobe file:"${1}" 2>&1)"
  for fontpath in "${2}"/*; do
    fontfile="$(basename "${fontpath}")"
    fontname="${fontfile%.*}"
    fontname="${fontname/-/\.\*}"
    fonttype="$(file "${fontpath}" |
                sed -n "s|^${fontpath}: \([A-Za-z]\+\) [F|f]ont .*|\1|p")"
    if ! [[ "${data}" =~ ${fontname} ]]; then
      if [[ "${fonttype}" = "OpenType" ]]; then
        fontstring+="-attach \"${fontpath}\" -metadata:s:t:${count} mimetype=application/vnd.ms-opentype "
        count=$((count + 1))
      elif [[ "${fonttype}" = "TrueType" ]]; then
        fontstring+="-attach \"${fontpath}\" -metadata:s:t:${count} mimetype=application/x-truetype-font "
        count=$((count + 1))
      fi
    fi
  done
  echo "${fontstring}"
}

# Generate an ffmpeg format string to add any the fonts in a directory to a
# video container if the font isn't already found it it. String will specify
# the stream index numbers.
function make_string_v4 {
  local data
  local fontstring=""
  local fonttype
  local fontpath
  local fontfile

  data="$(ffprobe file:"${1}" 2>&1)"
  for fontpath in "${2}"/*; do
    fontfile="$(basename "${fontpath}")"
    fontname="${fontfile%.*}"
    fontname="${fontname/-/\.\*}"
    fonttype="$(file "${fontpath}" |
                sed -n "s|^${fontpath}: \([A-Za-z]\+\) [F|f]ont .*|\1|p")"
    if ! [[ "${data}" =~ ${fontname} ]]; then
      if [[ "${fonttype}" = "OpenType" ]]; then
        fontstring+="-attach \"${fontpath}\" -metadata:s:t mimetype=application/vnd.ms-opentype "
      elif [[ "${fonttype}" = "TrueType" ]]; then
        fontstring+="-attach \"${fontpath}\" -metadata:s:t mimetype=application/x-truetype-font "
      fi
    fi
  done
  echo "${fontstring}"
}

# Generate an mkvpropedit format string to add any the fonts in a directory to a
# video container.
function make_string_mkv {
  local fontstring=""
  local fontpath

  for fontpath in "${1}"/*; do
    fontstring="${fontstring} --add-attachment ${fontpath@Q}"
  done
  echo "${fontstring}"
}

CONTAINER=

OPTIONS=i:d:fc:
LONGOPTIONS=input:,font_dir:,force,container:
PARSED=$(getopt -o "${OPTIONS}" --long "${LONGOPTIONS}" -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ ${#} -ge 1 ]; do
  case "${1}" in
    -i | --input)
      INPUT="${2}"
      shift 2
      ;;
    -d | --font_dir)
      FONTDIR="${2}"
      shift 2
      ;;
    -f | --force_override)
      FORCE=true
      shift 1
      ;;
    -c | --container)
      CONTAINER=mkv
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "What was that?"
      exit 3
      ;;
  esac
done

if ! [[ -v FONTDIR ]]; then
  show_error "ERROR: font directory missing. Exiting."
  exit 3
fi

if ! [[ -v FORCE ]]; then
  FORCE=false
fi

if [[ -v INPUT ]]; then
  if [[ -f "${INPUT}" ]]; then
    if ${FORCE}; then
      show_warning "Why search input fonts when they are to be overridden?"
      # make_string_v3 "${INPUT}" "${FONTDIR}"
    else
      make_string_v4 "${INPUT}" "${FONTDIR}"
    fi
  else
    show_error "ERROR: input ${INPUT@Q} is not a file. Exiting."
  fi
else
  if [[ "${CONTAINER}" = mkv ]]; then
    make_string_mkv "${FONTDIR}"
  else
    if ${FORCE}; then
      make_string_v1 "${FONTDIR}"
    else
      make_string_v2 "${FONTDIR}"
    fi
  fi
fi
