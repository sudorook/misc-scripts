#! /bin/bash
set -euo pipefail

ROOT="$(dirname "${0}")"

source "${ROOT}"/globals

! check_command jq sed && exit 3

function delete_directory() {
  local dir_owner
  if [ -d "${1}" ]; then
    dir_owner="$(stat -c "%U" "${1}")"
    if [[ "${USER}" = "${dir_owner}" ]]; then
      if [[ -v 2 ]]; then
        show_header "${2}"
      fi
      rm -rvf "${1}"
      echo
    else
      show_warning "${1@Q} owned by ${dir_owner@Q}. Skipping."
      echo
    fi
  else
    show_warning "${1@Q} not found. Skipping."
    echo
  fi
}

function delete_file() {
  local file_owner
  if [ -f "${1}" ]; then
    file_owner="$(stat -c "%U" "${1}")"
    if [[ "${USER}" = "${file_owner}" ]]; then
      if [[ -v 2 ]]; then
        show_header "${2}"
      fi
      rm -vf "${1}"
      echo
    else
      show_warning "${1@Q} owned by ${file_owner@Q}. Skipping."
      echo
    fi
  else
    show_warning "${1@Q} not found. Skipping."
    echo
  fi
}

function delete_config_section() {
  local file="${1}"
  local header="${2}"
  local tmp
  tmp="$(mktemp)"
  sed "/\[${header}\]/,/^\s*$/{d}" "${file}" | sed '${/^$/d}' > "${tmp}"
  mv "${tmp}" "${file}"
  sync
}

function delete_json_section() {
  local file="${1}"
  local path="${2}"
  local tmp
  tmp="$(mktemp)"
  # Check if file end with newline. If it does not, then use '-j'.
  if [ "$(tail -n 1 "${file}" | wc -l)" -eq 0 ]; then
    jq -j "${path} = []" "${file}" > "${tmp}"
  else
    jq "${path} = []" "${file}" > "${tmp}"
  fi
  mv "${tmp}" "${file}"
  sync
}

# KDE Clipboard
if check_command qdbus; then
  if qdbus > /dev/null 2>&1; then
    show_header "Clearing Klipper history."
    qdbus org.kde.klipper /klipper org.kde.klipper.klipper.clearClipboardHistory
    echo
  fi
else
  echo
fi

# Nvim state
delete_directory \
  "${HOME}/.local/state/nvim" \
  "Clearing Neovim state."

# Vim undo
delete_directory \
  "${HOME}/.vim/undo" \
  "Clearing Vim undo history."

# Recent files, etc.
if check_command sweeper; then
  if [ -v DESKTOP_SESSION ]; then
    show_header "Running sweeper."
    sweeper --automatic
    echo
  fi
else
  echo
fi

# System-wide cleanup
if check_command bleachbit; then
  if [ -f "${HOME}/.config/bleachbit/bleachbit.ini" ]; then
    show_header "Running BleachBit ($USER)."
    bleachbit -c --preset
  else
    show_warning "BleachBit not configured. Skipping."
    echo
  fi
else
  echo
fi

# Ark history
if [ -f "${HOME}"/.local/share/ark/ark_recentfiles ]; then
  show_header "Clearing Ark history"
  cat > "${HOME}"/.local/share/ark/ark_recentfiles << EOF
[RecentFiles]
files\size=0
EOF
fi

# Okular recent files.
show_header "Clearing Okular history."
delete_directory "${HOME}/.local/share/okular/docdata"
delete_config_section "${HOME}/.config/okularrc" "Recent Files"

# Gwenview image viewer history.
show_header "Clearing Gwenview history."
delete_directory "${HOME}/.local/share/gwenview/recentfolders"
delete_config_section "${HOME}/.config/gwenviewrc" "Recent Files"

# Calibre
delete_directory \
  "${HOME}/Documents/Library/.caltrash/" \
  "Emptying Calibre trash."
delete_json_section \
  "${HOME}/.config/calibre/viewer-webengine.json" \
  ".session_data.standalone_recently_opened"

# Remove trash directory
delete_directory \
  "${HOME}/.local/share/Trash/" \
  "Deleting trash directory."

# Trash at Share/ mountpoint
delete_directory \
  "${HOME}/Share/.Trash-1000" \
  "Deleting ~/Share trash directory."

# Python history
delete_file \
  "${HOME}/.python_history" \
  "Deleting Python REPL history."

# Node REPL history
delete_file \
  "${HOME}"/.node_repl_history \
  "Deleting node REPL history."

# mpv watch_later
delete_directory \
  "${HOME}/.local/state/mpv/watch_later" \
  "Clearing mpv history"

# less history
delete_file \
  "${HOME}/.local/state/lesshst" \
  "Deleting less history."

# wget history
delete_file \
  "${HOME}/.wget-hsts" \
  "Deleting wget history."
