#! /usr/bin/env python
"""
Rate the currently playing song in MPD.
"""

import os
import sys
import re
import argparse
from mpd import MPDClient
import beets.library


#
# Functions
#

def get_current_song():
    """Get the current song from MPD. Returns an Item."""
    # Connect to MPD.
    client = MPDClient()
    client.connect("localhost", 6600)
    info = client.currentsong()
    client.disconnect()

    # Load the Beets library
    libpath = os.path.expanduser('~/.config/beets/library.db')
    lib = beets.library.Library(libpath)

    # Find the song in the beets database based on the title, artist, and album
    # information provided by MPD.
    item = lib.items('"title::^' + re.sub(r'\)', r'\)', re.sub(r'\(', r'\(',
                                                               info['title'])) + '$" "artist::^' + info['artist'] + '$" "album::^' + info['album'] + '$"')
    if len(item) > 1:
        print('Multiple files found. Exiting.')
        sys.exit()
    else:
        return item[0]


def get_song_from_file(f):
    """Get a song from the database based on its path in the filesystem."""
    # Load the Beets library
    libpath = os.path.expanduser('~/.config/beets/library.db')
    lib = beets.library.Library(libpath)

    item = lib.items('"path:' + f + '"')
    if len(item) > 1:
        print('Multiple files found. Exiting.')
        sys.exit()
    else:
        return item[0]


def prompt_user_rating():
    """Prompt for user rating and make sure entry is valid."""
    r = int(input("Rating (1-5): "))
    if 1 <= int(r) <= 5:
        return r
    else:
        print('Invalid rating. Exiting.')
        sys.exit()


#
# Command line parsing
#

parser = argparse.ArgumentParser(description='Rate songs in your beets database.')
parser.add_argument('-f', '--file', help='Song file', required=False)
parser.add_argument('-r', '--rating', help='Rating', required=False)
args = parser.parse_args()


#
# Main
#

if args.file == None:
    song = get_current_song()
    print("Playing '" + song['title'] + "' from " +
          song['album'] + " by " + song['artist'])
else:
    song = get_song_from_file(args.file)

if args.rating == None:
    rating = prompt_user_rating()


#  song.load()
#  song['rating'] = rating
#  song.store()
