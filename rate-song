#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2018 - 2024 sudorook <daemon@nullcodon.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

"""
Rate the currently playing song in MPD.
"""

import os
import sys
import re
import argparse
from mpd import MPDClient
import beets.library


#
# Functions
#


def get_current_song():
    """Get the current song from MPD. Returns an Item."""
    # Connect to MPD.
    client = MPDClient()
    client.connect("localhost", 6600)
    info = client.currentsong()
    if bool(info) is False:
        print("MPD not playing. Exiting.")
        sys.exit()
    client.disconnect()

    # Load the Beets library
    libpath = os.path.expanduser("~/.config/beets/library.db")
    lib = beets.library.Library(libpath)

    # Find the song in the beets database based on the title, artist, and album
    # information provided by MPD.
    item = lib.items(
        '"title::^'
        + re.escape(info["title"])
        + '$"'
        + ' "artist::^'
        + re.escape(info["artist"])
        + '$"'
        + ' "album::^'
        + re.escape(info["album"])
        + '$"'
    )
    if len(item) > 1:
        print("Multiple files found. Exiting.")
        for i in item:
            print(
                "'"
                + i["title"]
                + "' from '"
                + i["album"]
                + "' by "
                + i["artist"]
            )
        sys.exit()
    elif len(item) == 0:
        print("First pass parsing failed. Trying again.")
        item = lib.items(
            '"title::^'
            + re.escape(info["title"])
            + '$"'
            + ' "artist::^'
            + re.escape(info["artist"])
            + '$"'
        )
        if len(item) == 1:
            return item[0]
        print("Second pass parsing failed. Trying again.")
        item = lib.items(
            '"title::^'
            + re.escape(info["title"])
            + '$"'
            + ' "album::^'
            + re.escape(info["album"])
            + '$"'
        )
        if len(item) == 1:
            return item[0]
        sys.exit(
            "Parsing failed. See below:\n"
            f"Title: {info['title']} -> {re.escape(info['title'])}\n"
            f"Artist: {info['artist']} -> {re.escape(info['artist'])}\n"
            f"Album: {info['album']} -> {re.escape(info['album'])}\n"
        )
    else:
        return item[0]


def get_song_from_file(file):
    """Get a song from the database based on its path in the filesystem."""
    # Load the Beets library
    libpath = os.path.expanduser("~/.config/beets/library.db")
    lib = beets.library.Library(libpath)

    item = lib.items('"path:' + file + '"')
    if len(item) > 1:
        sys.exit("Multiple files found. Exiting.")
    else:
        return item[0]


def prompt_user_rating():
    """Prompt for user rating and make sure entry is valid."""
    _rating = int(input("Rating (1-5): "))
    if 1 <= int(_rating) <= 5:
        return _rating
    sys.exit("Invalid rating. Exiting.")


def main():
    # Command line parsing
    parser = argparse.ArgumentParser(
        description="Rate songs in your beets database."
    )
    parser.add_argument("-f", "--file", help="Song file", required=False)
    parser.add_argument("-r", "--rating", help="Rating", required=False)
    args = parser.parse_args()

    if args.file is None:
        song = get_current_song()
        print(
            f"Rating '{song['title']}' from "
            f"'{song['album']}' by '{song['artist']}'"
        )
    else:
        song = get_song_from_file(args.file)

    if args.rating is None:
        rating = prompt_user_rating()
    else:
        if 0 <= int(args.rating) <= 5:
            rating = int(args.rating)
        else:
            print("Invalid rating. Exiting.")
            sys.exit()

    song.load()
    song["rating"] = rating
    song.store()


if __name__ == "__main__":
    main()
