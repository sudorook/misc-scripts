#! /bin/bash
set -eu
source globals

function check_wg_config {
  local in="${1}"
  local name="${1%.*}"
  local conn
  local conn_data
  
  local ipv4addr
  local ipv6addr

  local found=false
  
  ipv4addr="$(sed -n "s/^Address = \(.*\)/\1/p" "${in}" | cut -d"," -f1)"
  ipv6addr="$(sed -n "s/^Address = \(.*\)/\1/p" "${in}" | cut -d"," -f2)"

  # Check whether the config IP addressses, etc. are already found in an
  # existing conection.
  while read -r conn; do
    conn_data="$(nmcli conn show "${conn}")"
    if [[ "${conn_data}" =~ ipv6.addresses:\ *${ipv6addr} ]] && \
       [[ "${conn_data}" =~ ipv4.addresses:\ *${ipv4addr} ]] && \
       [[ "${conn_data}" =~ connection.interface-name:\ *${name} ]]; then
       # [[ "${conn_data}" =~ ipv4.dns:\ *${dns} ]] && \
      found=true
      break
    fi
  done <<< \
    "$(nmcli conn show | \
       sed -n "s/^\([A-Za-z0-9()\ -]\+\)\s\+[a-f0-9-]\+\s\+wireguard\s\+.*/\1/p" | \
       sed -e "s/ \+$//g")"

  if "${found}"; then
    show_warning "WARNING: matching configuration for ${in@Q} already exists." >&2
    return 1
  else
    return 0
  fi
}

function import_wg_config {
  local in="${1}"
  local name="${in%.*}"
  nmcli conn import type wireguard file "${in}"
  nmcli conn down "${name}" 
}

function rename_wg_iface {
  local in="${1}"
  local oldname="${in%.*}"
  local newname="${2}"
  nmcli conn modify "${oldname}" connection.id "${newname}"
}

function print_usage {
  show_info "Usage: wg-nm -i <config file> -n <wg connection name>"
}


#
# Main
#

OPTIONS=hi:n:
LONGOPTIONS=help,input:,name:
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "$0" -- "$@")
eval set -- "$PARSED"

while [ $# -ge 1 ]; do
  case "$1" in
    -i|--input)
      INPUT="${2}"
      shift 2
      ;;
    -n|--name)
      NAME="${2}"
      shift 2
      ;;
    -h|--help)
      print_usage
      exit
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: unknown flag ${1@Q}. Exiting."
      exit 3
      ;;
  esac
done

if ! [[ -v INPUT ]]; then
  show_error "ERROR: no input given. Exiting."
  exit 3
fi

if ! [ -f "${INPUT}" ]; then
  show_error "ERROR: input ${INPUT@Q} does not exist. Exiting."
  exit 3
fi

if check_wg_config "${INPUT}"; then
  import_wg_config "${INPUT}"
  if [[ -v NAME ]]; then
    if [[ -n "${NAME}" ]]; then
      rename_wg_iface "${INPUT}" "${NAME}"
    fi
  fi
fi
