#! /bin/bash
set -eu
source globals

# Global functions.
function print_usage() {
  echo "  -i  --input                 input video (e.g. input.mp4)"
  echo "  -o  --output                output gif (e.g. output.gif)"
  echo "  -s  --start                 starting timestamp (e.g. 01:20.5)"
  echo "  -l  --length                length in seconds (e.g. 3.5)"
  echo "  -d  --dimensions            dimensions of gif (e.g. 1280x720)"
  echo "  -r  --resolution            gif resolution (e.g. 720p)"
  echo "  -t  --subtitle              subtitle type (text, image, or none)"
  echo "Enter the dimensions manually or specify the desired resolution."
  exit 3
}

# Set default values globally.
ASPECTRATIO=16:9
RESOLUTION=480
DIMENSIONS=unset

OPTIONS=i:o:s:l:r:d:t:
LONGOPTIONS=input:,output:,start:,length:,resolution:,dimensions:,subtitle:
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "$0" -- "$@")
eval set -- "$PARSED"

while [ $# -ge 1 ]; do
  case "$1" in
    -i|--input)
      IN="$2"
      WIDTH=$(ffprobe -v error -select_streams v:0 \
                      -show_entries stream=width -of default=nw=1:nk=1 "${IN}")
      HEIGHT=$(ffprobe -v error -select_streams v:0 \
                       -show_entries stream=height -of default=nw=1:nk=1 "${IN}")
      shift 2
      ;;
    -o|--output)
      OUT="$2"
      shift 2
      ;;
    -s|--start)
      START="$2"
      shift 2
      ;;
    -l|--length)
      LENGTH="$2"
      shift 2
      ;;
    -t|--subtitle)
      SUBMODE="$2"
      shift 2
      ;;
    -d|--dimensions)
      case "$2" in
        854x480)
          RESOLUTION=480
          DIMENSIONS=854x480
          ;;
        1280x720)
          RESOLUTION=720
          DIMENSIONS=1280x720
          ;;
        1920x1080)
          RESOLUTION=1080
          DIMENSIONS=1920x1080
          ;;
        *)
          DIMENSIONS="$2"
          show_warning "Manually setting dimensions to $2."
          ;;
      esac
      shift 2
      ;;
    -r|--resolution)
      case "$2" in
        240p|240)
          RESOLUTION=240
          ;;
        360p|360)
          RESOLUTION=360
          ;;
        480p|480|480i)
          RESOLUTION=480
          ;;
        720p|720|720i)
          RESOLUTION=720
          ;;
        1080p|1080|1080i)
          RESOLUTION=1080
          ;;
        *)
          show_error "Resolution $2 not supported."
          exit 3
          ;;
      esac
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "Error"
      exit 3
      ;;
  esac
done

# Calculate dimensions (if not manually specified) from the resolution.
if ! [[ -v DIMENSIONS ]] || [ $DIMENSIONS = "unset" ]; then
  if ! [[ -v RESOLUTION ]] || [ $RESOLUTION = "unset" ]; then
    show_error "Specify a resolution or manually specify the dimensions."
    exit 3
  else
    if [[ $(( (($WIDTH+(2*$HEIGHT+8)/9)+$HEIGHT-1)/$HEIGHT )) -gt 2 ]]; then
      NEW_WIDTH=$(( ($RESOLUTION*16+8)/9 ))
      NEW_HEIGHT=$(( ($NEW_WIDTH*$HEIGHT+$WIDTH-1)/$WIDTH ))
      DIMENSIONS="$(( $NEW_WIDTH ))x$(( $NEW_HEIGHT ))"
    else
      DIMENSIONS="$(( ($RESOLUTION*$WIDTH+$HEIGHT-1) / $HEIGHT ))x$RESOLUTION"
    fi
  fi
fi

# Check if variables are set before running ffmpeg.
if [[ -v LENGTH ]] && [[ -v START ]] && [[ -v IN ]] && [[ -v OUT ]]; then
  if [[ -v SUBMODE ]]; then
    case "$SUBMODE" in
      "text")
        ffmpeg -y -i "$IN" -an -vf subtitles="$IN" \
               -ss "$START" -t "$LENGTH" -s "$DIMENSIONS" -f gif "$OUT"
        ;;
      "image")
        ffmpeg -y -i "$IN" -an -filter_complex "[0:v][0:s]overlay[v]" -map "[v]" \
               -ss "$START" -t "$LENGTH" -s "$DIMENSIONS" -f gif "$OUT"
        ;;
      "none")
        ffmpeg -y -i "$IN" -an -sn \
               -ss "$START" -t "$LENGTH" -s "$DIMENSIONS" -f gif "$OUT"
        ;;
      *)
        show_error "Subtitle $SUBMODE unsupported. Specify \"text\" or \"image\"."
        ;;
    esac
  else
    ffmpeg -y -i "$IN" -an -sn \
           -ss "$START" -t "$LENGTH" -s "$DIMENSIONS" -f gif "$OUT"
  fi

  if test $(command -v gifsicle); then
    gifsicle -O3 "$OUT" -o "$OUT"
  fi

  if test $(command -v eog); then
    eog "$OUT"
  fi
else
  show_error "Try again. Usage:"
  print_usage
  exit 3
fi
