#! /bin/bash
set -euo pipefail

ROOT="$(dirname "${0}")"

source "${ROOT}"/globals

! check_command ffprobe find mpv && exit 3

#
# Functions
#

check_inputs() {
  local item
  for item in "${@}"; do
    if [ -L "${item}" ]; then
      item="$(readlink -f "${item}")"
    fi
    if [ -d "${item}" ] || [ -f "${item}" ]; then
      continue
    else
      return 1
    fi
  done
  return 0
}

check_duration() {
  local duration
  duration="$(ffprobe -v error -show_entries stream=duration -select_streams a:0 -of default=noprint_wrappers=1:nk=1 file:"${1}")"
  if (("${duration%.*}" >= "${CUTOFF}")); then
    return 0
  else
    return 1
  fi
}
export -f check_duration

print_list() {
  if [[ "${CUTOFF}" = 0 ]]; then
    if [[ -v FILETYPE ]]; then
      find "${IN[@]}" -type f \( -iname "*.${FILETYPE}" \) -print
    else
      find "${IN[@]}" -type f \( -iname "*.mp3" -o -iname "*.opus" -o -iname "*.wav" -o -iname "*.mka" -o -iname "*.flac" -o -iname "*.aac" -o -iname "*.alac" -o -iname "*.mka" \) -print
    fi
  else
    if command -v parallel > /dev/null; then
      if [[ -v FILETYPE ]]; then
        find "${IN[@]}" -type f -iname "*.${FILETYPE}" -print0 |
          parallel -0 'check_duration {} && echo {}'
      else
        find "${IN[@]}" -type f \( -iname "*.mp3" -o -iname "*.opus" -o -iname "*.wav" -o -iname "*.mka" -o -iname "*.flac" -o -iname "*.aac" -o -iname "*.alac" -o -iname "*.mka" \) -print0 |
          parallel -0 'check_duration {} && echo {}'
      fi
    else
      if [[ -v FILETYPE ]]; then
        find "${IN[@]}" -type f -iname "*.${FILETYPE}" \
          -exec bash -c 'check_duration "${1}"' bash {} \; -print
      else
        find "${IN[@]}" -type f \( -iname "*.mp3" -o -iname "*.opus" -o -iname "*.wav" -o -iname "*.mka" -o -iname "*.flac" -o -iname "*.aac" -o -iname "*.alac" -o -iname "*.mka" \) \
          -exec bash -c 'check_duration "${1}"' bash {} \; -print
      fi
    fi
  fi
}

print_usage() {
  show_header "Usage: mpv-play"
  show_listitem "  -c|--cutoff   <int>     filter out files below cutoff (default: 0)"
  show_listitem "  -f|--filetype <string>  set extension keep (optional)"
  show_listitem "  -s|--shuffle            flag shuffle streams (default: false)"
  show_listitem "  -h|--help               print (this) help message"
}

#
# Globals
#

CUTOFF=0
SHUFFLE=false
REPLAYGAIN=album

#
# Parse command line variables.
#

OPTIONS=sf:c:h
LONGOPTIONS=shuffle,filetype:,cutoff:,help
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ "${#}" -ge 1 ]; do
  case "${1}" in
    -c | --cutoff)
      CUTOFF="${2}"
      shift 2
      ;;
    -f | --filetype)
      FILETYPE="${2}"
      shift 2
      ;;
    -s | --shuffle)
      SHUFFLE=true
      shift
      ;;
    -h | --help)
      print_usage
      exit
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: Unknown argument ${1@Q}. Exiting."
      exit 3
      ;;
  esac
done

#
# Main
#

IN=("${@}")
! check_inputs "${IN[@]}" && exit 3
export CUTOFF

if "${SHUFFLE}"; then
  print_list | mpv --shuffle --no-video --replaygain="${REPLAYGAIN}" --playlist=-
else
  print_list | sort -V | mpv --no-video --replaygain="${REPLAYGAIN}" --playlist=-
fi
