#! /bin/bash
set -eu
source globals

! check_command pdftk && exit 3

function adjust_page_numbers {
  local offset
  local length
  offset=$(( START - 1 ))

  awk -i inplace -v s="${START}" -v e="${END}" \
    '{
       if ($1 ~ "PageMediaBegin") {
         a=$0; getline; getline b; getline c; getline d;
         if (e == "end") {
           if ($2 > s) {
             print a; print; print b; print c; print d;
           }
         }
         else {
           if (($2 > s) && ($2 < e)) {
             print a; print; print b; print c; print d;
           }
         }
       }
       else if ($1 ~ "BookmarkBegin") {
         a=$0; getline b; getline c; getline;
         if (e == "end") {
           if ($2 >= s) {
             print a; print b; print c; print;
           }
         }
         else {
           if (($2 > s) && ($2 < e)) {
             print a; print b; print c; print;
           }
         }
       }
       else print;
     }' "${DATA}"

  # Offset the page number metadata
  awk -i inplace -v d="${offset}" '/BookmarkPageNumber:/{$2-=d}1' "${DATA}"
  awk -i inplace -v d="${offset}" '/PageMediaNumber:/{$2-=d}1' "${DATA}"

  if [[ "${END}" = end ]]; then
    length="$(sed -n "s/^NumberOfPages: \([0-9]\+\)$/\1/p" "${DATA}")"
    length="$((length - offset))"
    sed -i "s/^NumberOfPages: \([0-9]\+\)$/NumberOfPages: ${length}/g" "${DATA}"
  else
    length="$((END - offset))"
    sed -i "s/^NumberOfPages: \([0-9]\+\)$/NumberOfPages: ${length}/g" "${DATA}"
  fi
}

function clean_meta_tags {
  sed -i \
    -e "/InfoBegin/,+2d" \
    -e "/PdfID0/d" \
    -e "/PdfID1/d" "${DATA}"

  sed -i \
    -e "s///g" \
    -e "/^BookmarkTitle/N;s/\n\([^BookmarkLevel]\)/\1/g" \
    -e "/^$/d" "${DATA}"
}


START=1
END=end
KEEP=false

OPTIONS=e:ko:s:
LONGOPTIONS=end:,keep,output:,start:
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ ${#} -ge 1 ]; do
  case ${1} in
    -e|--end)
      END="${2}"
      shift 2
      ;;
    -k|--keep)
      KEEP=true
      shift 1
      ;;
    -o|--output)
      OUTPUT="${2}"
      shift
      ;;
    -s|--start)
      START="${2}"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: invalid flag."
      exit 3
      ;;
  esac
done

if [[ ${#} -ne 1 ]]; then
  show_error "ERROR: please specify 1 input file."
  exit 3
else
  if ! [ -f "${1}" ]; then
    show_error "ERROR: input '${1}' not found. Exiting."
    exit 3
  fi
  if ! [[ "$(file -b "${1}")" =~ ^PDF ]]; then
    show_error "ERROR: input '${1}' is not a PDF. Exiting."
    exit 3
  fi
  INPUT="${1}"
  NAME=${1%.*}
  EXTENSION=${1##*.}
fi

if ! [[ -v OUTPUT ]]; then
  OUTPUT="${NAME} new.${EXTENSION}"
fi

TMP="tmp-$$.pdf"
DATA="data-$$.txt"
trap 'rm -f "${TMP}" "${DATA}"; exit' INT TERM ERR

pdftk "${INPUT}" cat "${START}"-"${END}" output ${TMP}
pdftk "${INPUT}" dump_data output ${DATA}

clean_meta_tags
adjust_page_numbers

if ! $KEEP; then
  pdftk ${TMP} update_info ${DATA} output "${OUTPUT}"
  rm -f "${TMP}" "${DATA}"
else
  show_info "To re-assemble, run:"
  show_listitem "pdftk ${TMP@Q} update_info ${DATA@Q} output ${OUTPUT@Q} && rm ${TMP@Q} ${DATA@Q}"
fi
