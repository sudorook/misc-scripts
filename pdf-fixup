#! /bin/bash
set -euo pipefail
source globals

! check_command pdftk && exit 3

function adjust_page_numbers {
  local offset
  local length
  offset=$(( START - 1 ))

  awk -i inplace -v s="${START}" -v e="${END}" \
    '{
      if (a ~ "InfoBegin") {
        getline c
        while (c !~ "InfoValue") {
          if (getline c == 0) break
        }
        a=c
      }
      else if (a ~ "PageMediaBegin") {
        if (e == "end") {
          if ($2 >= s) {
            print a
            print
            getline c
            while (c !~ "Begin") {
              print c
              if (getline c == 0) break
            }
            a=c
          } else {
            getline c
            while (c !~ "Begin") {
              if (getline c == 0) break
            }
            a=c
          }
        }
        else {
          if (($2 >= s) && ($2 <= e)) {
            print a
            print
            getline c
            while (c !~ "Begin") {
              print c
              if (getline c == 0) break
            }
            a=c
          } else {
            getline c
            while (c !~ "Begin") {
              if (getline c == 0) break
            }
            a=c
          }
        }
      }
      else if (a ~ "PageLabelBegin") {
        b=$0
        if (e == "end") {
          if ($2 >= s) {
            print a
            print b
            getline c
            while (c !~ "NumStyle") {
              print c
              if (getline c == 0) break
            }
            print c
            getline a
          } else {
            getline c
            while (c !~ "NumStyle") {
              if (getline c == 0) break
            }
            getline a
          }
        }
        else {
          if (($2 >= s) && ($2 <= e)) {
            print a
            print b
            getline c
            while (c !~ "NumStyle") {
              print c
              if (getline c == 0) break
            }
            print c
            getline a
          } else {
            getline c
            while (c !~ "NumStyle") {
              if (getline c == 0) break
            }
            getline a
          }
        }
      }
      else if (a ~ "BookmarkBegin") {
        b=$0
        getline c
        getline
        if (e == "end") {
          if ($2 >= s) {
            print a; print b; print c; print;
          }
        }
        else {
          if (($2 >= s) && ($2 <= e)) {
            print a; print b; print c; print;
          }
        }
        a=$0
        # getline a
      }
      else {
        if ($1 !~ "Begin$") {
          print
        }
        a=$0
      }
    }' "${DATA}"

  sed -i \
    -e '/^PageMedia\(Rect\|Dimensions\):/s/,//g' \
    -e 's/-0.[0-9]\+/0/g' "${DATA}"

  # Offset the page number metadata
  awk -i inplace -v d="${offset}" '/BookmarkPageNumber:/{$2-=d}1' "${DATA}"
  awk -i inplace -v d="${offset}" '/PageMediaNumber:/{$2-=d}1' "${DATA}"
  awk -i inplace -v d="${offset}" '/PageLabelNewIndex:/{$2-=d}1' "${DATA}"

  if [[ "${END}" = end ]]; then
    length="$(sed -n "s/^NumberOfPages: \([0-9]\+\)$/\1/p" "${DATA}")"
    length="$((length - offset))"
    sed -i "s/^NumberOfPages: \([0-9]\+\)$/NumberOfPages: ${length}/g" "${DATA}"
  else
    length="$((END - offset))"
    sed -i "s/^NumberOfPages: \([0-9]\+\)$/NumberOfPages: ${length}/g" "${DATA}"
  fi
}

function clean_meta_tags {
  sed -i \
    -e "/InfoBegin/,+2d" \
    -e "/PdfID0/d" \
    -e "/PdfID1/d" \
    -e "s///g" \
    -e "/^$/d" \
    -e "/^BookmarkTitle:/N;s/\n\?\(\nBookmarkLevel.*\)\?/\1/g" \
    -e "/^BookmarkTitle:/s/\t\+/\ /g" \
    "${DATA}"
}


START=1
END=end
KEEP=false

OPTIONS=e:ko:s:
LONGOPTIONS=end:,keep,output:,start:
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ ${#} -ge 1 ]; do
  case ${1} in
    -e|--end)
      END="${2}"
      shift 2
      ;;
    -k|--keep)
      KEEP=true
      shift 1
      ;;
    -o|--output)
      OUTPUT="${2}"
      shift
      ;;
    -s|--start)
      START="${2}"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: invalid flag."
      exit 3
      ;;
  esac
done

if [[ ${#} -ne 1 ]]; then
  show_error "ERROR: please specify 1 input file."
  exit 3
else
  if ! [ -f "${1}" ]; then
    show_error "ERROR: input '${1}' not found. Exiting."
    exit 3
  fi
  if ! [[ "$(file -b "${1}")" =~ ^PDF ]]; then
    show_error "ERROR: input '${1}' is not a PDF. Exiting."
    exit 3
  fi
  INPUT="${1}"
  NAME=${1%.*}
  EXTENSION=${1##*.}
fi

if ! [[ -v OUTPUT ]]; then
  OUTPUT="${NAME} new.${EXTENSION}"
fi

BUILD="$(mktemp -d)"
TMP="${BUILD}/tmp-$$.pdf"
DATA="${BUILD}/data-$$.txt"
trap 'rm -rf "${BUILD}"; exit' INT TERM ERR EXIT

# Force UTF-8 locale, if possible.
LANG="$(locale -a | grep "utf-\?8" | head -n 1)"
if [ -n "${LANG}" ]; then
  export LC_ALL="${LANG}"
else
  show_warning "Failed to force UTF-8 locale."
fi

pdftk "${INPUT}" cat "${START}"-"${END}" output "${TMP}"
pdftk "${INPUT}" dump_data_utf8 output "${DATA}"

clean_meta_tags
adjust_page_numbers

if ! $KEEP; then
  pdftk "${TMP}" update_info_utf8 "${DATA}" output "${OUTPUT}"
  rm -f "${TMP}" "${DATA}"
else
  mv "${TMP}" "$(basename "${TMP}")"
  mv "${DATA}" "$(basename "${DATA}")"
  TMP="$(basename "${TMP}")"
  DATA="$(basename "${DATA}")"
  show_info "To re-assemble, run:" >&2
  show_listitem "pdftk ${TMP@Q} update_info_utf8 ${DATA@Q} output ${OUTPUT@Q} && rm ${TMP@Q} ${DATA@Q}" >&2
fi
