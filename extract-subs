#! /bin/bash
set -euo pipefail
source globals

! check_command ffmpeg ffprobe && exit 3

function parse_streams {
  local count
  local res
  local codec_type
  local codec_tag
  local codec_tag_string
  local codec_name
  local lang
  local idx

  count="$(ffprobe -v error \
             -show_entries format=nb_streams \
             -of default=noprint_wrappers=1:nokey=1 "${1}")"

  for idx in $(seq 0 "$((count-1))"); do
    res="$(ffprobe -v error -show_entries stream -select_streams "${idx}" "${1}")"
    codec_type="$(echo "${res}" | sed -n "s/^codec_type=\(.*\)/\1/p")"
    codec_name="$(echo "${res}" | sed -n "s/^codec_name=\(.*\)/\1/p")"
    codec_tag="$(echo "${res}" | sed -n "s/^codec_tag=\(.*\)/\1/p")"
    codec_tag_string="$(echo "${res}" | sed -n "s/^codec_tag_string=\(.*\)/\1/p")"
    lang="$(echo "${res}" | sed -n "s/^TAG:language=\(.*\)/\1/p")"

    if [[ -z "${lang}" ]]; then
      lang="${LANG_DEFAULT}"
    fi

    if [[ "${codec_type}" = subtitle ]]; then
      STREAMS+=("${idx}")
      TITLES+=("${lang}")
      if [[ "${codec_tag_string}" = tx3g ]]; then
        FORMATS+=("${codec_name} (${codec_tag_string} / ${codec_tag})")
      else
        FORMATS+=("${codec_name}")
      fi
    fi
  done
}

function extract_streams {
  local cmd
  local tmp
  local out
  for i in $(seq 0 $(( ${#TITLES[@]} - 1))); do
    cmd="ffmpeg -i file:${IN@Q} -map 0:${STREAMS[${i}]}"
    case "${FORMATS[${i}]}" in
      ass)
        cmd="${cmd} -c copy"
        out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.ass"
        ;;
      dvd_subtitle)
        cmd="${cmd} -c copy"
        if [[ "${EXTENSION}" = mp4 ]]; then
          out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.mp4"
        else
          out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.mkv"
        fi
        ;;
      "mov_text (tx3g / 0x67337874)")
        cmd="${cmd} -c ass -tag:s:s:0 tx3g"
        out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.ass"
        ;;
      mov_text|srt|subrip)
        cmd="${cmd} -c subrip"
        out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.srt"
        ;;
      hdmv_pgs_subtitle)
        cmd="${cmd} -c copy"
        out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.sup"
        ;;
      webvtt)
        cmd="${cmd} -c copy"
        out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.vtt"
        ;;
      *)
        show_warning "Format ${FORMATS[${i}]} not supported. Skipping."
        continue
        ;;
    esac
    cmd="${cmd} file:${out@Q} -y"
    show_listitem "${cmd}"
    eval "${cmd}"

    # If the Aegisub Project Garbage is included in the header, the MIME type
    # is incorrectly set as 'application/x-wine-extension-ini' for some reason.
    # It's correctly interpreted as 'text/plain' once deleted.
    case "${FORMATS[${i}]}" in
      ass|ssa)
        # dos-format files require the '\r', otherwise everything below the
        # header is deleted.
        sed -i '/\[Aegisub Project Garbage\]/,/^\r*$/d' "${out}"
        ;;
    esac

    # Delete binary 0x00. It shows up sometimes and causes the file to be
    # interpreted as containing binary data.
    tmp="$(mktemp)"
    tr -d '\000' < "${out}" > "${tmp}" && mv "${tmp}" "${out}"
  done
}


# Main

if ! [ -f "${1}" ]; then
  show_error "ERROR: ${1} does not exist. Exiting."
  exit 3
fi

LANG_DEFAULT=eng
IN="${1}"
NAME="${IN%.*}"
EXTENSION="${IN##*.}"
STREAMS=()
TITLES=()
FORMATS=()

parse_streams "${IN}"

if [ ${#STREAMS[@]} = 0 ]; then
  show_warning "No subtitle streams found in ${1}. Skipping..."
  exit
fi

extract_streams
