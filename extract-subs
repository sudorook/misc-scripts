#! /bin/bash
set -euo pipefail
source globals

! check_command ffmpeg ffprobe && exit 3

IN="${1}"
NAME="${IN%.*}"
EXTENSION="${IN##*.}"
STREAMS=()
TITLES=()
FORMATS=()

function parse_streams {
  local stream
  local title
  local format
  while IFS=$'\n' read -r line; do
    stream="$(echo "${line}" | sed -n "s/^ \+Stream #\([0-9]\+:[0-9]\+\)(\?\([a-z]\+\)\?)\?: Subtitle: \([a-z\_]\+\)\(, [0-9]\+x[0-9]\+\)\?\( (default)\)\?\( (forced)\)\?/\1/p")"
    title="$(echo "${line}" | sed -n "s/^ \+Stream #\([0-9]\+:[0-9]\+\)(\?\([a-z]\+\)\?)\?: Subtitle: \([a-z\_]\+\)\(, [0-9]\+x[0-9]\+\)\?\( (default)\)\?\( (forced)\)\?/\2/p")"
    format="$(echo "${line}" | sed -n "s/^ \+Stream #\([0-9]\+:[0-9]\+\)(\?\([a-z]\+\)\?)\?: Subtitle: \([a-z\_]\+\)\(, [0-9]\+ kb\/s\)\?\(, [0-9]\+x[0-9]\+\)\?\( (default)\)\?\( (forced)\)\?/\3/p")"

    if ! [[ "${stream}" = "" ]]; then
      STREAMS+=("${stream}")
      if [ -z "${title}" ]; then
        title=eng
      fi
      TITLES+=("${title}")
      FORMATS+=("${format}")
    fi
  done <<< "$(ffprobe "${IN}" 2>&1 | grep "^ \+Stream.*: Subtitle")"
}

function extract_streams {
  local cmd
  local out
  for i in $(seq 0 $(( ${#TITLES[@]} - 1))); do
    cmd="ffmpeg -i ${IN@Q} -map ${STREAMS[${i}]}"
    case "${FORMATS[${i}]}" in
      ass)
        cmd="${cmd} -c copy"
        out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.ass"
        ;;
      dvd_subtitle)
        cmd="${cmd} -c copy"
        if [[ "${EXTENSION}" = mp4 ]]; then
          out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.mp4"
        else
          out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.mkv"
        fi
        ;;
      "mov_text (tx3g / 0x67337874)")
        cmd="${cmd} -c ass -tag:s:s:0 tx3g"
        out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.ass"
        ;;
      mov_text|srt|subrip)
        cmd="${cmd} -c copy"
        out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.srt"
        ;;
      hdmv_pgs_subtitle)
        cmd="${cmd} -c copy"
        out="${NAME}_${STREAMS[${i}]}_${TITLES[${i}]}.sup"
        ;;
      *)
        show_warning "Format ${FORMATS[${i}]} not supported. Skipping."
        continue
        ;;
    esac
    cmd="${cmd} ${out@Q} -y"
    show_listitem "${cmd}"
    eval "${cmd}"
  done
}

parse_streams
if [ ${#STREAMS[@]} = 0 ]; then
  show_error "ERROR: No subtitle streams found in ${1}. Exiting."
  exit 3
fi

extract_streams
