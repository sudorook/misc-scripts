#! /bin/bash
set -eu
source globals


#
# Functions
#

function migrate_symlink() {
  local symlink
  local sympath
  local newsympath
  symlink="${1}"
  sympath="$(file "${symlink}" | sed -n "s,.*symbolic link to \(.*\)$,\1,p")"
  if [[ "${sympath}" =~ ^/home/${OLDNAME} ]]; then
    newsympath=$(echo "${sympath}" | sed -e "s/${OLDNAME}/${NEWNAME}/g")
    rm "${symlink}"
    ln -s "${newsympath}" "${symlink}"
  fi
}
export -f migrate_symlink

function check_username() {
  local re='^[a-z_][a-z0-9_-]*$'
  (( ${#1} > 16 )) && return 1
  [[ $1 =~ $re ]]
}


#
# Parse command line parameters
#

OPTIONS=o:n:
LONGOPTIONS=old:,new:
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "$0" -- "$@")
eval set -- "$PARSED"

while [ $# -ge 1 ]; do
  case "$1" in
    -o|--old)
      OLDNAME=${2}
      if ! check_username "${OLDNAME}"; then
        show_error "${OLDNAME} is not a valid name. Exiting."
        exit
      fi
      shift 2
      ;;
    -n|--new)
      NEWNAME=${2}
      if ! check_username "${NEWNAME}"; then \
        show_error "${NEWNAME} is not a valid name. Exiting."
        exit
      fi
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "Error"
      exit 3
      ;;
  esac
done

# If the user didn't supply user names via that command line, ask for them in
# the prompt.
if ! [[ -v OLDNAME ]]; then
  OLDNAME=$(ask_question "Change which user name?")
  if ! check_username "${OLDNAME}"; then
    show_error "${OLDNAME} is not a valid name. Exiting."
    exit
  fi
fi
if ! [[ -v NEWNAME ]]; then
  NEWNAME=$(ask_question "What is the new user name?")
  if ! check_username "${NEWNAME}"; then \
    show_error "${NEWNAME} is not a valid name. Exiting."
    exit
  fi
fi

# Make sure that OLDNAME and NEWNAME entries are valid.
if [[ -z "$OLDNAME" ]]; then echo "Error: empty old user name."; fi
if [[ -z "$NEWNAME" ]]; then echo "Error: empty new user name."; fi

export OLDNAME
export NEWNAME

#
# Rename user and migrate files
#

# Check that old user exists.
if ! getent group | grep "^${OLDNAME}" >/dev/null; then
  show_error "User ${OLDNAME} does not exist. Exiting."
  exit
fi

# Check that old user has no currently running processes.
if ps -u "${OLDNAME}" >/dev/null 2>&1; then
  show_error "User ${OLDNAME} has running processes. Exiting."
  exit
fi

# Check that NEWNAME is not an existing group.
if getent group | grep "${NEWNAME}" >/dev/null; then
  show_error "${NEWNAME} already taken (see getent group output). Exiting."
  exit
fi

# Migrate the user.
show_info "Renaming '${OLDNAME}' to '${NEWNAME}' (provide sudo password)."
sudo usermod -l "${NEWNAME}" -d "/home/${NEWNAME}" -m "${OLDNAME}"
sudo groupmod -n "${NEWNAME}" "${OLDNAME}"

show_info "Fixing symlinks in /home/${NEWNAME} (provide ${NEWNAME} pasword)."
su "${NEWNAME}" -c "find /home/${NEWNAME} -type l -exec bash -c 'migrate_symlink "{}"' \;"

# Prompt to change password.
REPLY=$(ask_question "Change password for ${NEWNAME}? (y/N)")
if [[ $REPLY =~ ^([Yy][Ee][Ss]|[Yy])$ ]]; then
  passwd "${NEWNAME}"
fi

show_success "Migrated!"
