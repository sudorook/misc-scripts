#! /bin/bash
set -eu
source globals

#
# Check inputs and requirements
#

function compute_bs1770gain {
  ! check_command bs1770gain && exit 3
  local item
  if [ "${#}" -eq 1 ]; then
    bs1770gain "${@}" -o "${TMPDIR}"
    if [[ "${KEEP}" = true ]]; then
      mkdir -p "${BACKUPDIR}"
      mv "${1}" "${BACKUPDIR}"
      mv "${TMPDIR}" "${1}"
    else
      mv "${1}" "${1}.bak"
      mv "${TMPDIR}" "${1}"
      rm -r "${1}.bak"
    fi
  else
    for item in "${@}"; do
      mkdir -p "${TMPDIR}/$(basename "${item}")"
      bs1770gain "${item}" -o "${TMPDIR}/$(basename "${item}")"
      if [[ "${KEEP}" = true ]]; then
        mkdir -p "${BACKUPDIR}/$(basename "${item}")"
        mv "${item}" "${BACKUPDIR}/$(basename "${item}")"
        mv "${TMPDIR}/$(basename "${item}")" "${item}"
      else
        mv "${item}" "${item}.bak"
        mv "${TMPDIR}/$(basename "${item}")" "${item}"
        rm -r "${item}.bak"
      fi
    done
    rmdir "${TMPDIR}"
  fi
  sync
}

function compute_r128gain {
  ! check_command r128gain && exit 3
  local item
  if [ "${#}" -eq 1 ]; then
    if [[ "${KEEP}" = true ]]; then
      cp -r "${1}" "${BACKUPDIR}"
      r128gain -a -r "${1}"
    else
      r128gain -a -r "${1}"
    fi
  else
    for item in "${@}"; do
      if [[ "${KEEP}" = true ]]; then
        mkdir -p "${BACKUPDIR}/"
        cp -r "${item}" "${BACKUPDIR}/$(basename "${item}")"
        r128gain -a -r "${item}"
      else
        r128gain -a -r "${item}"
      fi
    done
  fi
  sync
}

function scan_track_loudnorm {
  local data
  local peak
  local i

  data="$(ffmpeg -v info -nostdin -nostats -hide_banner -i file:"./${1}" \
    -map a -af loudnorm=print_format=json -f null - 2>&1 | sed -n "/{/,\$p")"

  peak="$(echo "${data}" | jq -r ".input_tp")"
  i="$(echo "${data}" | jq -r ".input_i")"

  echo "${peak}|${i}"
}
export -f scan_track_loudnorm

function scan_album_loudnorm {
  local data
  local peak
  local i
  local file
  local cmd
  local count=0

  cmd="ffmpeg -v info -nostdin -nostats -hide_banner"
  while read -r file; do
    file="${file/#/\.\/}"
    cmd="${cmd} -i file:${file@Q}"
    count=$((count+1))
  done <<< "$(find "${@}" -type f \( -iname "*.mp3" -o -iname "*.flac" -o -iname "*.opus" -o -iname "*.aac" \))"
  cmd="${cmd} -map a -filter_complex 'concat=n=${count}:v=0:a=1,loudnorm=print_format=json[o]' -map '[o]' -f null - 2>&1 | sed -n '/{/,\$p'"
  data="$(eval "${cmd}")"

  peak="$(echo "${data}" | jq -r ".input_tp")"
  i="$(echo "${data}" | jq -r ".input_i")"

  echo "${peak}|${i}"
}
export -f scan_album_loudnorm

function tag_track_loudnorm {
  local file
  local replaygain_album_gain
  local replaygain_album_peak
  local replaygain_track_gain
  local replaygain_track_peak
  local track_data
  local codec
  local tmp
  tmp="$(mktemp)"

  file="${1}"
  replaygain_album_gain="${2}"
  replaygain_album_peak="${3}"

  track_data="$(scan_track_loudnorm "${file}")"
  codec="$(ffprobe -v error -select_streams a -show_entries stream=codec_name -of compact=nokey=1 file:./"${file}")"
  codec="$(echo "${codec}" | cut -d"|" -f2)"
  replaygain_track_peak="$(echo "${track_data}" | cut -d"|" -f1)"
  replaygain_track_gain="$(echo "${track_data}" | cut -d"|" -f2)"
  replaygain_track_peak="$(echo "scale=6; e(l(10)*${replaygain_track_peak}/20)" | bc -l)"
  replaygain_track_gain="$(echo "scale=2; -18-(${replaygain_track_gain}/1)" | bc -l)"

  echo "Tagging ${file@Q}..." >&2
  ffmpeg -v error -nostdin -nostats -hide_banner -i file:./"${file}" -map 0 -map_metadata 0 \
    -metadata REPLAYGAIN_TRACK_GAIN="${replaygain_track_gain} dB" \
    -metadata REPLAYGAIN_ALBUM_GAIN="${replaygain_album_gain} dB" \
    -metadata REPLAYGAIN_TRACK_PEAK="${replaygain_track_peak}" \
    -metadata REPLAYGAIN_ALBUM_PEAK="${replaygain_album_peak}" \
    -c copy -f "${codec}" -y "${tmp}"
  mv "${tmp}" "${file}"
}
export -f tag_track_loudnorm

function compute_loudnormgain {
  ! check_command ffmpeg ffprobe sed jq bc && exit 3
  local item

  if [[ "${KEEP}" = true ]]; then
    if [ "${#}" -eq 1 ]; then
      cp -ra "${1}" "${BACKUPDIR}"
    else
      for item in "${@}"; do
        mkdir -p "${BACKUPDIR}/"
        cp -ra "${item}" "${BACKUPDIR}/$(basename "${item}")"
      done
    fi
  fi

  local album_data
  local replaygain_album_gain
  local replaygain_album_peak

  echo "Calculating album gain..." >&2
  album_data="$(scan_album_loudnorm "${@}")"
  replaygain_album_peak="$(echo "${album_data}" | cut -d"|" -f1)"
  replaygain_album_gain="$(echo "${album_data}" | cut -d"|" -f2)"
  replaygain_album_peak="$(echo "scale=6; e(l(10)*${replaygain_album_peak}/20)" | bc -l)"
  replaygain_album_gain="$(echo "scale=2; -18-(${replaygain_album_gain}/1)" | bc -l)"

  if command -v parallel >/dev/null; then
    find "${@}" \
      -type f \
      \( -iname "*.mp3" -o -iname "*.flac" -o -iname "*.opus" -o -iname "*.aac" \) -print0 \
      | parallel -0 "tag_track_loudnorm {} ${replaygain_album_gain} ${replaygain_album_peak}"
  else
    find "${@}" \
      -type f \
      \( -iname "*.mp3" -o -iname "*.flac" -o -iname "*.opus" -o -iname "*.aac" \) -exec \
      sh -c 'tag_track_loudnorm "${1}" '"${replaygain_album_gain} ${replaygain_album_peak}" sh {} \;
  fi
  sync
}

function scan_track_ebur128 {
  local data
  local peak
  local i

  data="$(ffmpeg -v info -nostdin -nostats -hide_banner -i file:"./${1}" \
    -map a -af ebur128=peak=true -f null - 2>&1)"

  peak="$(echo "${data}" | \
    tail -n 14 | \
    sed -n '/^\s\+True peak:/{N;s/.*\s\+Peak:\s\+\([+0-9\.-]\+\) dBFS/\1/p}')"
  i="$(echo "${data}" | \
    tail -n 14 | \
    sed -n '/^\s\+Integrated loudness:/{N;s/.*\s\+I:\s\+\([+0-9\.-]\+\) LUFS/\1/p}')"

  echo "${peak}|${i}"
}
export -f scan_track_ebur128

function scan_album_ebur128 {
  local data
  local peak
  local i
  local file
  local cmd
  local count=0

  cmd="ffmpeg -v info -nostdin -nostats -hide_banner"
  while read -r file; do
    file="${file/#/\.\/}"
    cmd="${cmd} -i file:${file@Q}"
    count=$((count+1))
  done <<< "$(find "${@}" -type f \( -iname "*.mp3" -o -iname "*.flac" -o -iname "*.opus" -o -iname "*.aac" \))"
  cmd="${cmd} -map a -filter_complex 'concat=n=${count}:v=0:a=1,ebur128=peak=true[o]' -map '[o]' -f null - 2>&1"
  data="$(eval "${cmd}")"

  peak="$(echo "${data}" | \
    tail -n 14 | \
    sed -n '/^\s\+True peak:/{N;s/.*\s\+Peak:\s\+\([+0-9\.-]\+\) dBFS/\1/p}')"
  i="$(echo "${data}" | \
    tail -n 14 | \
    sed -n '/^\s\+Integrated loudness:/{N;s/.*\s\+I:\s\+\([+0-9\.-]\+\) LUFS/\1/p}')"

  echo "${peak}|${i}"
}
export -f scan_album_ebur128

function tag_track_ebur128 {
  local file
  local replaygain_album_gain
  local replaygain_album_peak
  local replaygain_track_gain
  local replaygain_track_peak
  local track_data
  local codec
  local tmp
  tmp="$(mktemp)"

  file="${1}"
  replaygain_album_gain="${2}"
  replaygain_album_peak="${3}"

  track_data="$(scan_track_ebur128 "${file}")"
  codec="$(ffprobe -v error -select_streams a -show_entries stream=codec_name -of compact=nokey=1 file:./"${file}")"
  codec="$(echo "${codec}" | cut -d"|" -f2)"
  replaygain_track_peak="$(echo "${track_data}" | cut -d"|" -f1)"
  replaygain_track_gain="$(echo "${track_data}" | cut -d"|" -f2)"
  replaygain_track_peak="$(echo "scale=6; e(l(10)*${replaygain_track_peak}/20)" | bc -l)"
  replaygain_track_gain="$(echo "scale=2; -18-(${replaygain_track_gain}/1)" | bc -l)"

  echo "Tagging ${file@Q}..." >&2
  ffmpeg -v error -nostdin -nostats -hide_banner -i file:./"${file}" -map 0 -map_metadata 0 \
    -metadata REPLAYGAIN_TRACK_GAIN="${replaygain_track_gain} dB" \
    -metadata REPLAYGAIN_ALBUM_GAIN="${replaygain_album_gain} dB" \
    -metadata REPLAYGAIN_TRACK_PEAK="${replaygain_track_peak}" \
    -metadata REPLAYGAIN_ALBUM_PEAK="${replaygain_album_peak}" \
    -c copy -f "${codec}" -y "${tmp}"
  mv "${tmp}" "${file}"
}
export -f tag_track_ebur128

function compute_ebur128gain {
  ! check_command ffmpeg ffprobe bc sed && exit 3
  local item

  if [[ "${KEEP}" = true ]]; then
    if [ "${#}" -eq 1 ]; then
      cp -ra "${1}" "${BACKUPDIR}"
    else
      for item in "${@}"; do
        mkdir -p "${BACKUPDIR}/"
        cp -ra "${item}" "${BACKUPDIR}/$(basename "${item}")"
      done
    fi
  fi

  local album_data
  local replaygain_album_gain
  local replaygain_album_peak

  echo "Calculating album gain..." >&2
  album_data="$(scan_album_ebur128 "${@}")"
  replaygain_album_peak="$(echo "${album_data}" | cut -d"|" -f1)"
  replaygain_album_gain="$(echo "${album_data}" | cut -d"|" -f2)"
  replaygain_album_peak="$(echo "scale=6; e(l(10)*${replaygain_album_peak}/20)" | bc -l)"
  replaygain_album_gain="$(echo "scale=2; -18-(${replaygain_album_gain}/1)" | bc -l)"

  if command -v parallel >/dev/null; then
    find "${@}" \
      -type f \
      \( -iname "*.mp3" -o -iname "*.flac" -o -iname "*.opus" -o -iname "*.aac" \) -print0 \
      | parallel -0 "tag_track_ebur128 {} ${replaygain_album_gain} ${replaygain_album_peak}"
  else
    find "${@}" \
      -type f \
      \( -iname "*.mp3" -o -iname "*.flac" -o -iname "*.opus" -o -iname "*.aac" \) -exec \
      sh -c 'tag_track_ebur128 "${1}" '"${replaygain_album_gain} ${replaygain_album_peak}" sh {} \;
  fi
  sync
}

function check_inputs {
  local input

  if ! [ "${#}" -ge 0 ]; then
    show_error "ERROR: no inputs given. Exiting."
  fi

  for input in "${@}"; do
    if ! [ -e "${input}" ]; then
      show_error "ERROR: ${input@Q} not found. Exiting."
      exit 3
    fi
  done
}

function print_usage {
  show_header "Usage: set-replaygain <file(s) or director(ies)>"
  show_listitem \
    "  -k|--keep   flag to keep original files/directories (default: false)"
  show_listitem \
    "  -g|--gain   loudness scanner (default: bs1770gain)"
  show_listitem \
    "  -h|--help   print (this) help message"
}


#
# Main
#

KEEP=false
GAIN=bs1770gain

OPTIONS=khg:
LONGOPTIONS=keep,help,gain:
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ "${#}" -ge 1 ]; do
  case "${1}" in
    -k|--keep)
      KEEP=true
      shift 1
      ;;
    -g|--gain)
      GAIN="${2}"
      shift 2
      ;;
    -h|--help)
      print_usage
      exit
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: invalid flag."
      exit 3
      ;;
  esac
done

TMPDIR="$(mktemp -d)"
trap 'rm -rf "${TMPDIR}"; exit' INT TERM ERR

# Check that input files/directories exist before computing replay gain.
check_inputs "${@}"

# Generate name for backup directory.
if [[ "${KEEP}" = true ]]; then
  if [ "${#}" -eq 1 ]; then
    if [ -d "${1}" ]; then
      BACKUPDIR="${1}_$(date +%Y%m%d-%H%M%S)"
    else
      show_warning "Why compute album replay gain for one file? Stopping..."
      exit
    fi
  else
    BACKUPDIR="backup_$(date +%Y%m%d-%H%M%S)"
  fi
fi

case "${GAIN}" in
  bs1770gain)
    compute_bs1770gain "${@}"
    ;;
  r128gain)
    compute_r128gain "${@}"
    ;;
  ebur128gain|ebur128)
    compute_ebur128gain "${@}"
    ;;
  loudnormgain|loudnorm)
    compute_loudnormgain "${@}"
    ;;
  *)
    show_error "ERROR: ${GAIN@Q} not supported. Exiting."
    exit 3
    ;;
esac
