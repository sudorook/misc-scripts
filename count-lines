#! /bin/bash
set -eu
source globals

IGNOREFILES="-name '*.o' \
             -o -name '*.lo'\
             -o -name '*.a'\
             -o -name '*.pdf'\
             -o -name '*.doc*'\
             -o -name '*.ppt*'\
             -o -name '*.png'\
             -o -name '*.jpg'\
             -o -name '*.tiff?'\
             -o -name '*.gif'\
             -o -name '*.sw[a-p]'\
             -o -name '*~'\
             -o -name '*.tar.*'\
             -o -name '*.zip'\
             -o -name '*.git'\
             -o -name '*.tgz'"
IGNOREDIRS="-path '*/.git/*'\
            -o -path '*/bin/*'\
            -o -path '*/.deps/*'\
            -o -path '*/autom4te.cache/*'"

if [ ${#} = 0 ]; then
  eval "find . -type f \
    -not \( "${IGNOREFILES}" \) \
    -not \( "${IGNOREDIRS}" \) \
    -exec wc -l -- '{}' +"
else
  if [ -d "${1}" ]; then
    # As tempting as it may be, don't try to generate a list of ignore paths by
    # parsing the gitignore. People normally stick globs and all sorts of stuff
    # in them, and it's not possible to handle any permutation of them safely
    # as text and not accidentally execute them.
    eval "find ${1} -type f \
      -not \( "${IGNOREFILES}" \) \
      -not \( "${IGNOREDIRS}" \) \
      -exec wc -l -- '{}' +"
  elif [ -f "${1}" ]; then
    wc -l "${1}"
  else
    show_error "Unknown ${1}."
    exit 3
  fi
fi
