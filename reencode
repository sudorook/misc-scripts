#! /bin/bash
set -Eeuo pipefail
source globals

! check_command ffmpeg ffprobe && exit 3


#
# Globals
#

function convert_codec() {
  local in="${1}"
  local out="${2}"
  local cmd

  cmd="ffmpeg -v warning -i ${in@Q} -map_chapters 0 -map_metadata 0"

  # set video codec
  case "${OUT_VCODEC}" in
    h264)
      cmd="${cmd} -map 0:v -c:v libx264 -x264-params crf=${CRF}"
      ;;
    h265)
      cmd="${cmd} -map 0:v -c:v libx265 -x265-params crf=${CRF}"
      ;;
    *)
      show_error "ERROR: Video codec ${OUT_VCODEC} not supported."
      exit 3
      ;;
  esac

  # set audio codec
  case "${OUT_ACODEC}" in
    libfdk_aac|aac)
      cmd="${cmd} -map 0:a -c:a libfdk_aac -b:a 128k"
      ;;
    libmp3lame|mp3lame|mp3)
      cmd="${cmd} -map 0:a -c:a libmp3lame -b:a 320k"
      ;;
    libopus|opus)
      cmd="${cmd} -map 0:a -c:a libopus -b:a 64k"
      ;;
    copy|*)
      cmd="${cmd} -map 0:a:? -c:a copy"
      ;;
  esac

  # specify frame size if different from the input
  if ! [[ "${IN_DIMENSIONS}" = "${OUT_DIMENSIONS}" ]]; then
    # only add the size parameter if the output width/height are not larger
    # that the corresponding input values
    if [[ "$(echo "${IN_DIMENSIONS}" | cut -d"x" -f1)" -lt \
          "$(echo "${OUT_DIMENSIONS}" | cut -d"x" -f1)" ]] || \
       [[ "$(echo "${IN_DIMENSIONS}" | cut -d"x" -f2)" -lt \
          "$(echo "${OUT_DIMENSIONS}" | cut -d"x" -f2)" ]]; then
      show_warning \
        "WARNING: Dimensions ${OUT_DIMENSIONS} exceed input ${IN_DIMENSIONS}."
    else
      cmd="${cmd} -s ${OUT_DIMENSIONS}"
    fi
  fi

  # convert subtitle format to mov_text for mp4s, otherwise copy
  case "${CONTAINER}" in
    mp4)
      cmd="${cmd} -map 0:s:? -c:s mov_text"
      ;;
    *)
      cmd="${cmd} -map 0:s:? -c:s copy"
      ;;
  esac

  # manually specify the container format (ffmpeg may not infer from file name)
  case "${CONTAINER}" in
    mkv|matroska)
      cmd="${cmd} -f matroska"
      ;;
    mp4)
      cmd="${cmd} -f mp4"
      ;;
    *)
      show_error "ERROR: Container ${CONTAINER} not supported. Exiting."
      exit 3
      ;;
  esac

  # add output
  cmd="${cmd} ${out@Q}"

  echo "${cmd}"
  eval "${cmd}"
}

function scan_input {
  local fstring
  local vstring
  local format_name
  local width
  local height

  fstring="$(ffprobe -v error -show_format "${IN}")"
  vstring="$(ffprobe -v error \
               -select_streams v:0 -show_streams "${IN}")"

  if ! [[ -v CONTAINER ]]; then
    format_name="$(echo "${fstring}" | sed -n "s/^format_name=\(.*\)/\1/p")"
    if [[ "${format_name}" =~ matroska ]]; then
      CONTAINER=matroska
    elif [[ "${format_name}" =~ mp4 ]]; then
      CONTAINER=mp4
    else
      CONTAINER=avi
    fi
  fi

  if ! [[ -v OUT_VCODEC ]]; then
    OUT_VCODEC=h265
  fi
  if ! [[ -v OUT_ACODEC ]]; then
    OUT_ACODEC=copy
  fi
  if ! [[ -v OUT_SCODEC ]]; then
    OUT_SCODEC=copy
  fi

  width="$(echo "${vstring}" | sed -n "s/^width=\(.*\)$/\1/p")"
  height="$(echo "${vstring}" | sed -n "s/^height=\(.*\)$/\1/p")"
  IN_DIMENSIONS="${width}x${height}"
  if ! [[ -v OUT_DIMENSIONS ]]; then
    OUT_DIMENSIONS="${IN_DIMENSIONS}"
  fi

  if ! [[ -v FPS ]]; then
    FPS="$(echo "${vstring}" | sed -n "s/^r_frame_rate=\(.*\)$/\1/p" | bc -l)"
  fi
}

function print_usage() {
  echo "Usage: reencode -i|--input <input> \\"
  echo "                -a|--acodec <audio codec> \\"
  echo "                -v|--vcodec <video codec> \\"
  echo "                -r|--crf <compression factor> \\"
  echo "                -d|--dimensions <output dimensions> \\"
  echo "                -c|--container <container format> \\"
}


#
# Parse command line options
#

OPTIONS=i:a:v:r:c:d:h
LONGOPTIONS=input:,acodec:,vcodec:,crf:,dimensions:,container:,help
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "$0" -- "$@")
eval set -- "$PARSED"
while [ $# -ge 1 ]; do
  case "$1" in
    -i|--input)
      IN="$2"
      scan_input
      NAME=${IN%.*}
      BACKUP="${IN}_$(date +%Y%m%d-%H%M%S).bak"
      shift 2
      ;;
    -a|--acodec)
      case "$2" in
        *)
          show_error "ERROR: Codec ${2} not supported. Exiting."
          exit 3
          ;;
      esac
      shift 2
      ;;
    -v|--vcodec)
      case "$2" in
        # Use x265 to encode h.265 videos.
        h265|x265|libx265)
          OUT_VCODEC=h265
          ;;
        # Use x264 to encode h.264 videos.
        h264|x264|libx264)
          OUT_VCODEC=h264
          ;;
        *)
          show_error "ERROR: Codec ${2} is not supported. Exiting."
          exit 3
          ;;
      esac
      shift 2
      ;;
    -r|--crf)
      CRF="${2}"
      shift 2
      ;;
    -d|--dimensions)
      OUT_DIMENSIONS="${2}"
      shift 2
      ;;
    -c|--container)
      CONTAINER="${2}"
      shift 2
      ;;
    -h|--help)
      print_usage
      exit
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: Unknown command line option."
      print_usage
      exit 3
      ;;
  esac
done


#
# Main
#

if ! [[ -v IN ]]; then
  show_error "ERROR: Input file not given."
  exit 3
fi

if ! [[ -f "${IN}" ]]; then
  show_error "ERROR: Input file not found."
  exit 3
fi

if ! [[ -v CRF ]]; then
  case "${OUT_VCODEC}" in
    h264)
      CRF=18 # default 23
      ;;
    h265)
      CRF=23 # default 28
      ;;
  esac
fi

case "${CONTAINER}" in
  avi|mpg)
    mv "${IN}" "${BACKUP}"
    CONTAINER=mp4
    trap 'mv -f "${BACKUP}" "${IN}"; rm -f "${NAME}.mp4"; exit' INT TERM ERR
    convert_codec "${BACKUP}" "${NAME}.${CONTAINER}"
    ;;
  mkv|matroska)
    mv "${IN}" "${BACKUP}"
    CONTAINER=mkv
    trap 'mv -f "${BACKUP}" "${IN}"; exit' INT TERM ERR
    convert_codec "${BACKUP}" "${NAME}.${CONTAINER}"
    ;;
  mp4)
    mv "${IN}" "${BACKUP}"
    trap 'mv -f "${BACKUP}" "${IN}"; exit' INT TERM ERR
    convert_codec "${BACKUP}" "${NAME}.${CONTAINER}"
    ;;
  *)
    show_error "ERROR: Format ${CONTAINER} files not supported."
    exit 3
    ;;
esac
