#!/bin/bash

# SPDX-FileCopyrightText: 2015 - 2024 sudorook <daemon@nullcodon.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

set -euo pipefail

ROOT="$(dirname "${0}")"

source "${ROOT}"/globals
source "${ROOT}"/langs

! check_command grep sed && exit 3

#
# Functions
#

function get_language() {
  local res=
  local lang

  for lang in "${!ISO_639_2[@]}"; do
    if [[ "${1,,}" = "${ISO_639_2[${lang}],,}" ]]; then
      res="${1}"
      break
    fi
  done

  # if language not found, try to parse three-character strings as a fallback.
  if [ -z "${res}" ]; then
    for lang in "${!ISO_639_2[@]}"; do
      if [[ "${1,,}" = "${lang,,}" ]]; then
        res="${1^^}"
        break
      fi
    done
  fi

  # If language not found, try to parse two-character strings as a fallback.
  if [ -z "${res}" ]; then
    for lang in "${!ISO_639_1[@]}"; do
      if [[ "${1,,}" = "${lang,,}" ]]; then
        res="${1^^}"
        break
      fi
    done
  fi

  echo "${res}"
}

function cleanup_filename() {
  local name
  local extension
  local lang
  local newname

  name="${1%.*}"
  extension="${1##*.}"
  newname=$(echo "${name}" |
    sed \
      -e "s/_\|\./\ /g" \
      -e "s/^\[[^]]*\]\ \?//g" \
      -e "s/\ \[[^()]*\]$//g" \
      -e "s/\ \[[^()]*\]\ //g" \
      -e "s/^([^()]*)\ \?//g" \
      -e "s/\ ([^()]*)//g" \
      -e "s/\(DVD\|HDTV\|BluRay\|WEB-DL\|BRRip\|DVDRip\|HDRip\).*//g" \
      -e "s/\(x264\|x265\|h264\|h265\|AV1\).*//g" \
      -e "s/\(720\|1080\|480\|576\)p.*//g" \
      -e "s/\ *\(19\|20\)\([0-9]\{2\}\)\ *$/ (\1\2)/g" \
      -e "s/\b\(s[0-9]\+e[0-9]\+\)/\U\1/g" \
      -e "s/\(S[0-9]\+E[0-9]\+\)[- ]/\1 /g" \
      -e "s/\ \ \+/\ /g" \
      -e "s/\ *$//g" \
      -e "s/^\ *//g")

  if [[ "${name}" = "${extension}" ]]; then
    echo "${newname}"
  else
    lang="$(echo "${name}" | sed -e "s/_\|\./\ /g" | grep -o '[^\ ？!?]*$')"
    lang="$(get_language "${lang}")"
    if [ -z "${lang}" ]; then
      echo "${newname}.${extension}"
    else
      local tmp
      tmp="$(echo "${newname}" | grep -o '[^\ ？!?]*$')"
      if [[ "${lang,,}" = "${tmp,,}" ]]; then
        echo "${newname}.${extension}"
      else
        echo "${newname} ${lang}.${extension}"
      fi
    fi
  fi
}

function scan_files() {
  local infile
  local outfile

  for infile in *; do
    if [ -f "${infile}" ]; then
      if [[ "$(file -b --mime-type "${infile}")" =~ video|text|audio|subrip ]]; then
        outfile=$(cleanup_filename "${infile}")
        if [[ "${infile}" = "${outfile}" ]]; then
          show_listitem "${outfile@Q} unchanged..." >&2
          continue
        else
          show_listitem "${infile@Q} -> ${outfile@Q}" >&2
        fi
        INFILES+=("${infile}")
        OUTFILES+=("${outfile}")
      fi
    fi
  done
}

function print_files() {
  local idx

  for idx in "${!INFILES[@]}"; do
    echo "${OUTFILES[${idx}]}"
  done
}

function rename_files() {
  local idx

  for idx in "${!INFILES[@]}"; do
    mv -v "${INFILES[${idx}]}" "${OUTFILES[${idx}]}"
  done
}

#
# Main
#

INFILES=()
OUTFILES=()

scan_files
if [ "${#INFILES[@]}" -eq 0 ]; then
  show_info "No files found. Exiting..."
  exit
fi

# print_files

REPLY=$(ask_question "Is this good? (y/N)")

if [[ "${REPLY}" =~ ^(y|Y) ]]; then
  rename_files
  show_success "Done!"
else
  echo "Fine. Be that way."
fi
