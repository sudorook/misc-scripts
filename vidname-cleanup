#! /bin/bash
set -euo pipefail
source globals
source langs

#
# Functions
#

function get_language() {
  local res=

  for lang in "${!ISO_639_2[@]}"; do
    if [[ "${1,,}" = "${ISO_639_2[${lang}],,}" ]]; then
      res="${1}"
      break
    fi
  done

  # If language not found, try to parse three-character strings as a fallback.
  if [ -z "${res}" ]; then
    for lang in "${!ISO_639_2[@]}"; do
      if [[ "${1,,}" = "${lang,,}" ]]; then
        res="${1^^}"
        break
      fi
    done
  fi

  echo "${res}"
}

function cleanup_filename() {
  local name
  local extension
  local lang
  local newname

  name="${1%.*}"
  extension="${1##*.}"
  lang="$(echo "${name}" | sed -e "s/_\|\./\ /g" | grep -o '[^\ ]*$')"
  lang="$(get_language "${lang}")"
  newname=$(echo "${name}" | \
    sed -e "s/_\|\./\ /g" | \
    sed -e "s/^\[[^]]*\]\ \?//g" | \
    sed -e "s/\ \[[^()]*\]//g" | \
    sed -e "s/^([^()]*)\ \?//g" | \
    sed -e "s/\ ([^()]*)//g" | \
    sed -e "s/\(DVD\|HDTV\|BluRay\|WEB-DL\|BRRip\|DVDRip\|HDRip\).*//g" | \
    sed -e "s/\(x264\|x265\).*//g" | \
    sed -e "s/\(720\|1080\|480\|576\)p.*//g" | \
    sed -e "s/\ *\(19\|20\)\([0-9]\{2\}\)\ *$//g" | \
    sed -e "s/\b\(s[0-9][0-9]e[0-9][0-9]\)/\U\1/g" | \
    sed -e "s/\ \ \+/\ /g" | \
    sed -e "s/\ *$//g" | \
    sed -e "s/^\ *//g")

  if [ -z "${lang}" ]; then
    echo "${newname}.${extension}"
  else
    local tmp
    tmp="$(echo "${newname}" | grep -o '[^\ ]*$')"
    if [[ "${lang}" = "${tmp}" ]]; then
      echo "${newname}.${extension}"
    else
      echo "${newname} ${lang}.${extension}"
    fi
  fi
}

function scan_files() {
  local infile
  local outfile

  for infile in *; do
    if [ -f "${infile}" ]; then
      if [[ "$(file -b --mime-type "${infile}")" =~ video|text|audio ]]; then
        outfile=$(cleanup_filename "${infile}")
        echo "${outfile}" >&2
        INFILES+=("${infile}")
        OUTFILES+=("${outfile}")
      fi
    fi
  done
}

function print_files() {
  local idx

  for idx in "${!INFILES[@]}"; do
    echo "${OUTFILES[$idx]}"
  done
}

function rename_files() {
  local idx

  for idx in "${!INFILES[@]}"; do
    if [ "${INFILES[$idx]}" != "${OUTFILES[$idx]}" ]; then
      mv -v "${INFILES[$idx]}" "${OUTFILES[$idx]}"
    else
      echo "${INFILES[$idx]} unchanged"
    fi
  done
}


#
# Main
#

INFILES=()
OUTFILES=()

scan_files
if [ "${#INFILES[@]}" -eq 0 ]; then
  show_error "No files found. Exiting..."
  exit 3
fi

# print_files

REPLY=$(ask_question "Is this good? (y/N)")

if [[ "${REPLY}" =~ ^(y|Y) ]]; then
  rename_files
  show_success "Done!"
else
  echo "Fine. Be that way."
fi
