#!/bin/bash

# SPDX-FileCopyrightText: 2021 - 2024 sudorook <daemon@nullcodon.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

set -euo pipefail

ROOT="$(dirname "${0}")"

source "${ROOT}"/globals

! check_command find sed zip unzip && exit 3

#
# Functions
#

# Add read and write permissions to CSS files
function set_rw {
  find . -type d -exec chmod u+rwx,+rx {} \;
  find . -type f -iname "*.css" -exec chmod u+w,+r {} \;
}

# Remove justified text
function unjustify {
  find . -type f -iname "*.css" -exec sed -i \
    -e "s,text-align\s*:\s*justify;,/*text-align: justify;*/,g" \
    -e "s,text-align\s*:\s*justify !important;,/*text-align: justify !important;*/,g" \
    -e "s,text-align\s*:\s*justify[\n\r]*$,/*text-align: justify*/,g" \
    -e "s,text-align\s*:\s*justify},/*text-align: justify*/},g" {} \;
}

# Remove hard-coded colors
function unset_colors {
  find . -type f -iname "*.css" -exec sed -i \
    -e "s,background-color\ *:\ *#\([[:xdigit:]]\+\);,/*background-color: \1;*/,g" \
    -e "s,background-color\ *:\ *#\([[:xdigit:]]\+\)$,/*background-color: \1*/,g" \
    -e "s,background-color\ *:\ *#\([[:xdigit:]]\+\)},/*background-color: \1*/},g" \
    -e "s,background-color\ *:\ *\(rgba([\d[[:digit:]]\,\ ]\+)\);,/*background-color: \1;*/,g" \
    -e "s,background-color\ *:\ *\(rgba([\d[[:digit:]]\,\ ]\+)\)$,/*background-color: \1*/,g" \
    -e "s,background-color\ *:\ *\(rgba([\d[[:digit:]]\,\ ]\+)\)},/*background-color: \1*/},g" \
    -e "s,\(;*\ *\)color\ *:\ *#\([[:xdigit:]]\+\);,\1/*color: \2;*/,g" \
    -e "s,\(;*\ *\)color\ *:\ *#\([[:xdigit:]]\+\)$,\1/*color: \2*/,g" \
    -e "s,\(;*\ *\)color\ *:\ *#\([[:xdigit:]]\+\)},\1/*color: \2*/},g" {} \;
}

# Check if file is ePub
function is_epub {
  local in="${1}"
  local ext="${1##*.}"
  local mime
  mime="$(file -b --mime-type "${in}")"
  if [[ "${mime}" =~ epub ]] || [[ "${ext,,}" = epub ]]; then
    return 0
  else
    return 1
  fi
}

function print_usage {
  show_header "Usage: epub-fixup -c|--unset_color <input>"
  show_listitem "  -c  (optional) comment out hard-coded colors"
  show_listitem "  -h  print (this) help message"
}

#
# Main
#

UNSETCOLOR=false

OPTIONS=ch
LONGOPTIONS=unset_color,help
PARSED=$(getopt -o "${OPTIONS}" --long "${LONGOPTIONS}" -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ "${#}" -ge 1 ]; do
  case "${1}" in
    -c | --unset_color)
      UNSETCOLOR=true
      shift 1
      ;;
    -h | --help)
      print_usage
      exit
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: invalid flag."
      print_usage
      exit 3
      ;;
  esac
done

if ! is_epub "${1}"; then
  show_error "ERROR: Input not ePub format."
  exit 3
fi

FILE="$(basename "${1}")"
NAME="${1%.*}"
EXTENSION="${1##*.}"

BUILDDIR="$(mktemp -d)"
trap 'rm -rf "${BUILDDIR}"; exit' INT TERM ERR EXIT

cp "${1}" "${BUILDDIR}"
pushd "${BUILDDIR}" > /dev/null

unzip "${FILE}"

set_rw
unjustify
if ${UNSETCOLOR}; then
  unset_colors
fi

zip -u "${FILE}" || true # override return false if no update performed

popd > /dev/null
mv "${BUILDDIR}/${FILE}" "${NAME} new.${EXTENSION}"
