#! /bin/bash
set -euo pipefail

ROOT="$(dirname "${0}")"

source "${ROOT}"/globals

! check_command find && exit 3

#
# Global functions
#

function seek {
  local inputstring=
  local item
  local cmd

  case ${MODE} in
    precise)
      for item in "${@}"; do
        inputstring="${inputstring:+${inputstring} -o }-iname \"${item}\" -o -iname \".${item}\""
      done
      ;;
    sloppy)
      for item in "${@}"; do
        inputstring="${inputstring:+${inputstring} -o }-iname \"*${item}*\" -o -iname \".*${item}*\""
      done
      ;;
    *)
      show_error "ERROR: seeker mode ${MODE@Q} is incorrect."
      exit 3
      ;;
  esac

  cmd="find ${HOME}/ \
         \( -path \"${HOME}/Desktop\" \
            -o -path \"${HOME}/Documents\" \
            -o -path \"${HOME}/Downloads\" \
            -o -path \"${musicdir:-${HOME}/Music}\" \
            -o -path \"${HOME}/Pictures\" \
            -o -path \"${projectdir:-${HOME}/Projects}\" \
            -o -path \"${HOME}/Public\" \
            -o -path \"${HOME}/Share\" \
            -o -path \"${HOME}/Sync\" \
            -o -path \"${HOME}/Templates\" \
            -o -path \"${videodir:-${HOME}/Videos}\" \
            -o -path \"${HOME}/.cargo\" \
            -o -path \"${HOME}/.gem\" \
            -o -path \"${HOME}/.go\" \
            -o -path \"${HOME}/.ipython\" \
            -o -path \"${HOME}/.julia\" \
            -o -path \"${HOME}/.local/share/containers\" \
            -o -path \"${HOME}/.lyrics\" \
            -o -path \"${HOME}/.mozilla\" \
            -o -path \"${HOME}/.npm\" \
            -o -path \"${HOME}/.pkgbuild\" \
            -o -path \"${HOME}/.R\" \
            -o -path \"${HOME}/.rustup\" \
            -o -path \"${HOME}/.ssh\" \
            -o -path \"${HOME}/.thunderbird\" \
            -o -path \"${HOME}/.weechat\" \
            -o -path \"${HOME}/.zotero\" \
            -o -path \"${archivedir:-${HOME}/Desktop}\" \
            -o -path \"${backup1:-${HOME}/Desktop}\" \
            -o -path \"${backup2:-${HOME}/Desktop}\" \
            -o -path \"${kvmdir:-${HOME}/Desktop}\" \
            -o -path \"${kvmshare:-${HOME}/Desktop}\" \
            -o -path \"${vboxdir:-${HOME}/Desktop}\" \
            -o -path \"${encryptpath:-${HOME}/Desktop}\" \
            -o -path \"${decryptpath:-${HOME}/Desktop}\" \
            -o -path \"${gtkdir:-${HOME}/Desktop}\" \
            -o -path \"${plasmadir:-${HOME}/Desktop}\" \
            -o -path \"${icondir:-${HOME}/Desktop}\" \
            -o -path \"${zshdir:-${HOME}/Desktop}\" \
            -o -path \"${pkgbuilddir:-${HOME}/Desktop}\" \
            -o -path \"${calibrelibrarydir:-${HOME}/Desktop}\" \
            -o -path \"${zoterodatadir:-${HOME}/.zotero-data}\" \
            -o -path \"${entrydir:-${HOME}/Desktop}\" \) -prune , \
         \( ${inputstring} \) -print"

  eval "${cmd}"
}

function destroy {
  local item
  local parent
  while read -r item; do
    ! [ -e "${item}" ] && continue
    parent="$(dirname "${item}")"
    rm -rf "${item}"
    if [[ "${parent}" != . ]]; then
      rmdir -p --ignore-fail-on-non-empty "${parent}"
    fi
  done
}

function print_usage {
  show_header "Usage: seek-and-destroy -p|-s <search string>"
  show_listitem "  -p|--precise  seek files and directories that match exactly"
  show_listitem "  -s|--sloppy   match anything containing <search string>"
}

#
# Parse command line options
#

OPTIONS="hps"
LONGOPTIONS=help,precise,sloppy
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "${0}" -- "${@}")
eval set -- "${PARSED}"
MODE=

while [ ${#} -ge 1 ]; do
  case ${1} in
    -p | --precise)
      if [[ -n ${MODE} ]]; then
        show_warning "WARNING: overriding seek from ${MODE@Q} to 'precise'."
      fi
      MODE=precise
      shift
      ;;
    -s | --sloppy)
      if [[ -n ${MODE} ]]; then
        show_warning "WARNING: overriding seek from ${MODE@Q} to 'sloppy'."
      fi
      MODE=sloppy
      shift
      ;;
    -h | --help)
      print_usage
      exit
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: invalid flag ${1@Q}. Exiting."
      exit 3
      ;;
  esac
done

#
# Run seeker and destroyer
#

MODE="${MODE:-precise}"

if [ ${#} = 0 ]; then
  show_error "ERROR: no input(s) given. Exiting."
  exit 3
fi

show_header "--- Running ${MODE} seeker ---"
RES="$(seek "${@}")"

if [ -n "${RES}" ]; then
  echo "${RES}"
  CHECK=$(ask_question 'Permission to destroy? (y/N)')
  if [[ ${CHECK} =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo "Yessir!"
    echo "${RES}" | destroy
    show_success "Target(s) eliminated."
  else
    echo "As you wish..."
  fi
else
  echo "Target(s) not found. Standing down."
fi
