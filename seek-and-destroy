#! /bin/bash
set -euo pipefail
source globals

#
# Check global variables
#

if ! [[ -v archivedir ]]; then
  archivedir=${HOME}/Desktop
fi
if ! [[ -v kvmdir ]]; then
  kvmdir=${HOME}/Desktop
fi
if ! [[ -v kvmshare ]]; then
  kvmshare=${HOME}/Desktop
fi
if ! [[ -v encryptpath ]]; then
  encryptpath=${HOME}/Desktop
fi
if ! [[ -v decryptpath ]]; then
  decryptpath=${HOME}/Desktop
fi
if ! [[ -v gtkdir ]]; then
  gtkdir=${HOME}/Desktop
fi
if ! [[ -v icondir ]]; then
  icondir=${HOME}/Desktop
fi
if ! [[ -v zshdir ]]; then
  zshdir=${HOME}/Desktop
fi
if ! [[ -v musicdir ]]; then
  musicdir=${HOME}/Desktop
fi
if ! [[ -v videodir ]]; then
  videodir=${HOME}/Desktop
fi
if ! [[ -v pkgbuilddir ]]; then
  pkgbuilddir=${HOME}/Desktop
fi
if ! [[ -v projectdir ]]; then
  projectdir=${HOME}/Desktop
fi
if ! [[ -v entrydir ]]; then
  entrydir=${HOME}/Desktop
fi


#
# Global functions
#

function sloppy_seek {
  local inputstring=
  local item
  local cmd

  for item in "${@}"; do
    if [ -z "${inputstring}" ]; then
      inputstring="-iname \"*${item}*\" -o -iname \".*${item}*\""
    else
      inputstring="${inputstring} \
                   -o -iname \"*${item}*\" -o -iname \".*${item}*\""
    fi
  done

  cmd="find ${HOME}/ \
         \( -path \"${HOME}/Desktop\" \
            -o -path \"${HOME}/Documents\" \
            -o -path \"${HOME}/Downloads\" \
            -o -path \"${HOME}/Music\" \
            -o -path \"${HOME}/Pictures\" \
            -o -path \"${projectdir}\" \
            -o -path \"${HOME}/Public\" \
            -o -path \"${HOME}/Sync\" \
            -o -path \"${HOME}/Templates\" \
            -o -path \"${HOME}/Videos\" \
            -o -path \"${HOME}/.gem\" \
            -o -path \"${HOME}/.go\" \
            -o -path \"${HOME}/.cache\" \
            -o -path \"${HOME}/.ipython\" \
            -o -path \"${HOME}/.julia\" \
            -o -path \"${HOME}/.lyrics\" \
            -o -path \"${HOME}/.mozilla\" \
            -o -path \"${HOME}/.npm\" \
            -o -path \"${HOME}/.R\" \
            -o -path \"${HOME}/.ssh\" \
            -o -path \"${HOME}/.thunderbird\" \
            -o -path \"${HOME}/.zotero\" \
            -o -path \"${HOME}/.zotero-data\" \
            -o -path \"${archivedir}\" \
            -o -path \"${kvmdir}\" \
            -o -path \"${kvmshare}\" \
            -o -path \"${encryptpath}\" \
            -o -path \"${decryptpath}\" \
            -o -path \"${gtkdir}\" \
            -o -path \"${icondir}\" \
            -o -path \"${zshdir}\" \
            -o -path \"${musicdir}\" \
            -o -path \"${videodir}\" \
            -o -path \"${entrydir}\" \
            -o -path \"${pkgbuilddir}\" \) -prune \
         -o \( ${inputstring} \) -print"

  eval "${cmd}" 2>/dev/null || true
}

function precise_seek {
  local inputstring=
  local item
  local cmd

  for item in "${@}"; do
    if [ -z "${inputstring}" ]; then
      inputstring="-name \"${item}\" -o -name \".${item}\" \
                   -o -name \".${item,,}\" -o -name \".${item,,}\" \
                   -o -name \".${item^,}\" -o -name \".${item^}\""
    else
      inputstring="${inputstring} \
                   -o -name \"${item}\" -o -name \".${item}\" \
                   -o -name \".${item,,}\" -o -name \".${item,,}\" \
                   -o -name \".${item^,}\" -o -name \".${item^}\""
    fi
  done

  cmd="find ${HOME}/ \
         \( -path \"${HOME}/Desktop\" \
            -o -path \"${HOME}/Documents\" \
            -o -path \"${HOME}/Downloads\" \
            -o -path \"${HOME}/Music\" \
            -o -path \"${HOME}/Pictures\" \
            -o -path \"${projectdir}\" \
            -o -path \"${HOME}/Public\" \
            -o -path \"${HOME}/Sync\" \
            -o -path \"${HOME}/Templates\" \
            -o -path \"${HOME}/Videos\" \
            -o -path \"${HOME}/.gem\" \
            -o -path \"${HOME}/.go\" \
            -o -path \"${HOME}/.cache\" \
            -o -path \"${HOME}/.ipython\" \
            -o -path \"${HOME}/.julia\" \
            -o -path \"${HOME}/.lyrics\" \
            -o -path \"${HOME}/.mozilla\" \
            -o -path \"${HOME}/.npm\" \
            -o -path \"${HOME}/.R\" \
            -o -path \"${HOME}/.ssh\" \
            -o -path \"${HOME}/.thunderbird\" \
            -o -path \"${HOME}/.zotero\" \
            -o -path \"${HOME}/.zotero-data\" \
            -o -path \"${archivedir}\" \
            -o -path \"${kvmdir}\" \
            -o -path \"${kvmshare}\" \
            -o -path \"${encryptpath}\" \
            -o -path \"${decryptpath}\" \
            -o -path \"${gtkdir}\" \
            -o -path \"${icondir}\" \
            -o -path \"${zshdir}\" \
            -o -path \"${musicdir}\" \
            -o -path \"${videodir}\" \
            -o -path \"${entrydir}\" \
            -o -path \"${pkgbuilddir}\" \) -prune \
         -o \( ${inputstring} \) -print"

  eval "${cmd}" 2>/dev/null || true
}

function destroy {
  xargs -n 1 -exec rm -rf
}


#
# Parse command line options
#

OPTIONS="ps"
LONGOPTIONS=precise,sloppy
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "${0}" -- "${@}")
eval set -- "${PARSED}"
MODE=

while [ ${#} -ge 1 ]; do
  case ${1} in
    -p|--precise)
      MODE=precise
      shift
      ;;
    -s|--sloppy)
      MODE=sloppy
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "Error: invalid flag."
      exit 3
      ;;
  esac
done


#
# Run seeker and destroyer
#

if [ ${#} = 0 ]; then
  show_error "ERROR: no input(s) given. Exiting."
  exit 3
fi

RES=
case ${MODE} in
  precise)
    show_header "--- Running precise seeker ---"
    RES="$(precise_seek "${@}")"
    ;;
  sloppy)
    show_header "--- Running sloppy seeker ---"
    RES="$(sloppy_seek "${@}")"
    ;;
  *)
    show_error "Error: seeker mode ${MODE} is incorrect."
    exit 3
    ;;
esac

if [[ -n "${RES}" ]]; then
  echo "${RES}"
  check=$(ask_question 'Permission to destroy? (y/N)')
  if [[ ${check} =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo "Yessir!"
    echo "${RES}" | destroy
    show_success "Target(s) eliminated."
  else
    echo "As you wish..."
  fi
else
  echo "Target(s) not found. Standing down."
fi
