#! /bin/bash
set -euo pipefail
source globals

#
# Check global variables
#

archivedir="${archivedir:-${HOME}/Desktop}"
backup1="${backup1:-${HOME}/Desktop}"
backup2="${backup2:-${HOME}/Desktop}"
kvmdir="${kvmdir:-${HOME}/Desktop}"
kvmshare="${kvmsharedir:-${HOME}/Desktop}"
vboxdir="${vboxdir:-${HOME}/Desktop}"
encryptpath="${encryptpath:-${HOME}/Desktop}"
decryptpath="${decryptpath:-${HOME}/Desktop}"
gtkdir="${gtkdir:-${HOME}/Desktop}"
icondir="${icondir:-${HOME}/Desktop}"
zshdir="${zshdir:-${HOME}/Desktop}"
musicdir="${musicdir:-${HOME}/Music}"
videodir="${videodir:-${HOME}/Videos}"
pkgbuilddir="${pkgbuilddir:-${HOME}/Desktop}"
projectdir="${projectdir:-${HOME}/Projects}"
entrydir="${entrydir:-${HOME}/Desktop}"


#
# Global functions
#

function seek {
  local inputstring=
  local item
  local cmd
  local mode="${1}"

  case ${mode} in
    precise)
      for item in "${@:2}"; do
        if [ -z "${inputstring}" ]; then
          inputstring="-iname \"${item}\" -o -iname \".${item}\""
        else
          inputstring="${inputstring} -o -iname \"${item}\" -o -iname \".${item}\""
        fi
      done
      ;;
    sloppy)
      for item in "${@:2}"; do
        if [ -z "${inputstring}" ]; then
          inputstring="-iname \"*${item}*\" -o -iname \".*${item}*\""
        else
          inputstring="${inputstring} -o -iname \"*${item}*\" -o -iname \".*${item}*\""
        fi
      done
      ;;
    *)
      show_error "ERROR: seeker mode ${mode@Q} is incorrect."
      exit 3
      ;;
  esac

  cmd="find ${HOME}/ \
         \( -path \"${HOME}/Desktop\" \
            -o -path \"${HOME}/Documents\" \
            -o -path \"${HOME}/Downloads\" \
            -o -path \"${HOME}/Music\" \
            -o -path \"${HOME}/Pictures\" \
            -o -path \"${projectdir}\" \
            -o -path \"${HOME}/Public\" \
            -o -path \"${HOME}/Sync\" \
            -o -path \"${HOME}/Templates\" \
            -o -path \"${HOME}/Videos\" \
            -o -path \"${HOME}/.gem\" \
            -o -path \"${HOME}/.go\" \
            -o -path \"${HOME}/.ipython\" \
            -o -path \"${HOME}/.julia\" \
            -o -path \"${HOME}/.lyrics\" \
            -o -path \"${HOME}/.mozilla\" \
            -o -path \"${HOME}/.npm\" \
            -o -path \"${HOME}/.R\" \
            -o -path \"${HOME}/.ssh\" \
            -o -path \"${HOME}/.thunderbird\" \
            -o -path \"${HOME}/.zotero\" \
            -o -path \"${HOME}/.zotero-data\" \
            -o -path \"${archivedir}\" \
            -o -path \"${backup1}\" \
            -o -path \"${backup2}\" \
            -o -path \"${kvmdir}\" \
            -o -path \"${kvmshare}\" \
            -o -path \"${vboxdir}\" \
            -o -path \"${encryptpath}\" \
            -o -path \"${decryptpath}\" \
            -o -path \"${gtkdir}\" \
            -o -path \"${icondir}\" \
            -o -path \"${zshdir}\" \
            -o -path \"${musicdir}\" \
            -o -path \"${videodir}\" \
            -o -path \"${entrydir}\" \
            -o -path \"${pkgbuilddir}\" \) -prune , \
         \( ${inputstring} \) -print"

  eval "${cmd}" 2>/dev/null || true
}

function destroy {
  local item
  local parent
  while read -r item; do
    parent="$(dirname "${item}")"
    rm -rf "${item}"
    if [[ "${parent}" != . ]]; then
      rmdir -p --ignore-fail-on-non-empty "${parent}"
    fi
  done
}


#
# Parse command line options
#

OPTIONS="ps"
LONGOPTIONS=precise,sloppy
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "${0}" -- "${@}")
eval set -- "${PARSED}"
MODE=

while [ ${#} -ge 1 ]; do
  case ${1} in
    -p|--precise)
      if [[ -n ${MODE} ]]; then
        show_warning "WARNING: overriding seek from ${MODE@Q} to 'precise'."
      fi
      MODE=precise
      shift
      ;;
    -s|--sloppy)
      if [[ -n ${MODE} ]]; then
        show_warning "WARNING: overriding seek from ${MODE@Q} to 'sloppy'."
      fi
      MODE=sloppy
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: invalid flag ${1@Q}. Exiting."
      exit 3
      ;;
  esac
done


#
# Run seeker and destroyer
#

if [ ${#} = 0 ]; then
  show_error "ERROR: no input(s) given. Exiting."
  exit 3
fi

show_header "--- Running ${MODE} seeker ---"
RES="$(seek "${MODE}" "${@}")"

if [ -n "${RES}" ]; then
  echo "${RES}"
  check=$(ask_question 'Permission to destroy? (y/N)')
  if [[ ${check} =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo "Yessir!"
    echo "${RES}" | destroy
    show_success "Target(s) eliminated."
  else
    echo "As you wish..."
  fi
else
  echo "Target(s) not found. Standing down."
fi
