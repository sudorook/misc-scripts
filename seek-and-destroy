#! /bin/bash
set -euo pipefail
source globals

#
# Global functions
#

function seek {
  local inputstring=
  local item
  local cmd

  # set default paths when global vars (from globals file) are not defined
  local archivedir="${archivedir:-${HOME}/Desktop}"
  local backup1="${backup1:-${HOME}/Desktop}"
  local backup2="${backup2:-${HOME}/Desktop}"
  local kvmdir="${kvmdir:-${HOME}/Desktop}"
  local kvmshare="${kvmsharedir:-${HOME}/Desktop}"
  local vboxdir="${vboxdir:-${HOME}/Desktop}"
  local encryptpath="${encryptpath:-${HOME}/Desktop}"
  local decryptpath="${decryptpath:-${HOME}/Desktop}"
  local gtkdir="${gtkdir:-${HOME}/Desktop}"
  local icondir="${icondir:-${HOME}/Desktop}"
  local zshdir="${zshdir:-${HOME}/Desktop}"
  local musicdir="${musicdir:-${HOME}/Music}"
  local videodir="${videodir:-${HOME}/Videos}"
  local pkgbuilddir="${pkgbuilddir:-${HOME}/Desktop}"
  local projectdir="${projectdir:-${HOME}/Projects}"
  local entrydir="${entrydir:-${HOME}/Desktop}"

  case ${MODE} in
    precise)
      for item in "${@}"; do
        if [ -z "${inputstring}" ]; then
          inputstring="-iname \"${item}\" -o -iname \".${item}\""
        else
          inputstring="${inputstring} -o -iname \"${item}\" -o -iname \".${item}\""
        fi
      done
      ;;
    sloppy)
      for item in "${@}"; do
        if [ -z "${inputstring}" ]; then
          inputstring="-iname \"*${item}*\" -o -iname \".*${item}*\""
        else
          inputstring="${inputstring} -o -iname \"*${item}*\" -o -iname \".*${item}*\""
        fi
      done
      ;;
    *)
      show_error "ERROR: seeker mode ${MODE@Q} is incorrect."
      exit 3
      ;;
  esac

  cmd="find ${HOME}/ \
         \( -path \"${HOME}/Desktop\" \
            -o -path \"${HOME}/Documents\" \
            -o -path \"${HOME}/Downloads\" \
            -o -path \"${musicdir}\" \
            -o -path \"${HOME}/Pictures\" \
            -o -path \"${projectdir}\" \
            -o -path \"${HOME}/Public\" \
            -o -path \"${HOME}/Sync\" \
            -o -path \"${HOME}/Templates\" \
            -o -path \"${videodir}\" \
            -o -path \"${HOME}/.cargo\" \
            -o -path \"${HOME}/.gem\" \
            -o -path \"${HOME}/.go\" \
            -o -path \"${HOME}/.ipython\" \
            -o -path \"${HOME}/.julia\" \
            -o -path \"${HOME}/.lyrics\" \
            -o -path \"${HOME}/.mozilla\" \
            -o -path \"${HOME}/.npm\" \
            -o -path \"${HOME}/.R\" \
            -o -path \"${HOME}/.rustup\" \
            -o -path \"${HOME}/.ssh\" \
            -o -path \"${HOME}/.thunderbird\" \
            -o -path \"${HOME}/.zotero\" \
            -o -path \"${HOME}/.zotero-data\" \
            -o -path \"${archivedir}\" \
            -o -path \"${backup1}\" \
            -o -path \"${backup2}\" \
            -o -path \"${kvmdir}\" \
            -o -path \"${kvmshare}\" \
            -o -path \"${vboxdir}\" \
            -o -path \"${encryptpath}\" \
            -o -path \"${decryptpath}\" \
            -o -path \"${gtkdir}\" \
            -o -path \"${icondir}\" \
            -o -path \"${zshdir}\" \
            -o -path \"${pkgbuilddir}\" \
            -o -path \"${entrydir}\" \) -prune , \
         \( ${inputstring} \) -print"

  eval "${cmd}"
}

function destroy {
  local item
  local parent
  while read -r item; do
    ! [ -e "${item}" ] && continue
    parent="$(dirname "${item}")"
    rm -rf "${item}"
    if [[ "${parent}" != . ]]; then
      rmdir -p --ignore-fail-on-non-empty "${parent}"
    fi
  done
}

function print_usage {
  show_header "Usage: seek-and-destroy -p|-s <search string>"
  show_listitem "  -p|--precise  seek files and directories that match exactly"
  show_listitem "  -s|--sloppy   match anything containing <search string>"
}


#
# Parse command line options
#

OPTIONS="hps"
LONGOPTIONS=help,precise,sloppy
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "${0}" -- "${@}")
eval set -- "${PARSED}"
MODE=

while [ ${#} -ge 1 ]; do
  case ${1} in
    -p|--precise)
      if [[ -n ${MODE} ]]; then
        show_warning "WARNING: overriding seek from ${MODE@Q} to 'precise'."
      fi
      MODE=precise
      shift
      ;;
    -s|--sloppy)
      if [[ -n ${MODE} ]]; then
        show_warning "WARNING: overriding seek from ${MODE@Q} to 'sloppy'."
      fi
      MODE=sloppy
      shift
      ;;
    -h|--help)
      print_usage
      exit
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: invalid flag ${1@Q}. Exiting."
      exit 3
      ;;
  esac
done


#
# Run seeker and destroyer
#

MODE="${MODE:-precise}"

if [ ${#} = 0 ]; then
  show_error "ERROR: no input(s) given. Exiting."
  exit 3
fi

show_header "--- Running ${MODE} seeker ---"
RES="$(seek "${@}")"

if [ -n "${RES}" ]; then
  echo "${RES}"
  CHECK=$(ask_question 'Permission to destroy? (y/N)')
  if [[ ${CHECK} =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo "Yessir!"
    echo "${RES}" | destroy
    show_success "Target(s) eliminated."
  else
    echo "As you wish..."
  fi
else
  echo "Target(s) not found. Standing down."
fi
