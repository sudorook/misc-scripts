#! /bin/bash
set -Eeuo pipefail
source globals

! check_command ffmpeg ffprobe sed && exit 3

function strip_titles {
  echo "${1}"
}

function parse_streams {
  local data
  local codec_type
  local codec_name
  local lang
  local title
  local v_counter=0
  local a_counter=0
  local s_counter=0
  local t_counter=0
  local c_counter=0

  data="$(ffprobe -v error -show_entries stream=index,codec_type,codec_name:stream_tags=language,title -print_format compact file:"${IN}")"
  while read -r line; do
    codec_type="$(echo "${line}" | cut -d"|" -f4 | sed -n "s/^codec_type=\(.*\)/\1/p")"
    codec_name="$(echo "${line}" | cut -d"|" -f3 | sed -n "s/^codec_name=\(.*\)/\1/p")"
    lang="$(echo "${line}" | cut -d"|" -f5 | sed -n "s/^tag:language=\(.*\)/\1/p")"
    title="$(echo "${line}" | cut -d"|" -f6 | sed -n "s/^tag:title=\(.*\)/\1/p")"

    case "${codec_type}" in
      video)
        if [[ "${codec_name}" =~ png|jpg|jpeg ]]; then
          STREAMS+=("cover")
          COUNTERS+=("${c_counter}")
          c_counter=$((c_counter + 1))
        else
          STREAMS+=("video")
          COUNTERS+=("${v_counter}")
          v_counter=$((v_counter + 1))
        fi
        ;;
      audio)
        STREAMS+=("audio")
        COUNTERS+=("${a_counter}")
        a_counter=$((a_counter + 1))
        ;;
      subtitle)
        STREAMS+=("subtitle")
        COUNTERS+=("${s_counter}")
        s_counter=$((s_counter + 1))
        ;;
      attachment)
        STREAMS+=("attachment")
        COUNTERS+=("${t_counter}")
        s_counter=$((t_counter + 1))
        ;;
      *)
        ;;
    esac

    if [ -n "${title}" ]; then
      TITLES+=("$(strip_titles "${title}")")
    else
      TITLES+=("")
    fi

    if [ -n "${lang}" ]; then
      LANGUAGES+=("$(strip_titles "${lang}")")
    else
      LANGUAGES+=("")
    fi
  done <<< "${data}"
}

function strip_generic {
  local container="${1}"
  local codec_type
  local idx
  local title
  local lang
  local counter
  local cmd

  cmd="ffmpeg -v info -i file:${IN@Q} -map_metadata -1 -map_chapters 0 -map 0 -c copy"

  for ((idx=0; idx < "${#STREAMS[@]}"; ++idx)); do
    codec_type="${STREAMS[${idx}]}"
    title="${TITLES[${idx}]}"
    counter="${COUNTERS[${idx}]}"
    lang="${LANGUAGES[${idx}]}"
    case "${codec_type}" in
      video)
        ;;
      audio)
        if [[ -n "${lang}" ]]; then
          cmd="${cmd} -metadata:s:a:${counter} language=${lang}"
        fi
        if [[ -n "${title}" ]]; then
          cmd="${cmd} -metadata:s:a:${counter} handler=${title}"
        fi
        ;;
      subtitle)
        if [[ -n "${lang}" ]]; then
          cmd="${cmd} -metadata:s:s:${counter} language=${lang}"
        fi
        if [[ -n "${title}" ]]; then
          cmd="${cmd} -metadata:s:s:${counter} handler=${title}"
        fi
        ;;
      *)
        ;;
    esac
  done

  case "${container}" in
    mkv|MKV|matroska|Matroska)
      cmd="${cmd} -f matroska -y ${TMP}"
      ;;
    mp4|MP4)
      cmd="${cmd} -f mp4 -y ${TMP}"
      ;;
    avi|AVI)
      cmd="${cmd} -f avi -y ${TMP}"
      ;;
    *)
      show_error "ERROR: ${container} not supported. Exiting."
      exit 3
      ;;
  esac

  show_info "${cmd}" >&2
  eval "${cmd}"
  if ${KEEP}; then
    mv "${IN}" "${BACKUP}"
    mv "${TMP}" "${IN}"
  else
    mv "${IN}" "${BACKUP}"
    mv "${TMP}" "${IN}"
    rm "${BACKUP}"
  fi
}

function strip_matroska {
  local codec_type
  local idx
  local title
  local lang
  local counter

  if ${KEEP}; then
    cp "${IN}" "${BACKUP}"
  fi

  mkvpropedit --tags all: "${IN}"
  mkvpropedit -e info -d title "${IN}"
  mkvpropedit -e info -d date "${IN}"

  for ((idx=0; idx < "${#STREAMS[@]}"; ++idx)); do
    codec_type="${STREAMS[${idx}]}"
    title="${TITLES[${idx}]}"
    lang="${LANGUAGES[${idx}]}"
    counter="${COUNTERS[${idx}]}"
    case "${codec_type}" in
      video)
        if [[ -n "${title}" ]]; then
          mkvpropedit -e track:v$((counter+1)) --set name="${title}" "${IN}"
        else
          mkvpropedit -e track:v$((counter+1)) --delete name "${IN}"
        fi
        ;;
      audio)
        if [[ -n "${title}" ]]; then
          mkvpropedit -e track:a$((counter+1)) --set name="${title}" "${IN}"
        else
          mkvpropedit -e track:a$((counter+1)) --delete name "${IN}"
        fi
        ;;
      subtitle)
        if [[ -n "${title}" ]]; then
          mkvpropedit -e track:s$((counter+1)) --set name="${title}" "${IN}"
        else
          mkvpropedit -e track:s$((counter+1)) --delete name "${IN}"
        fi
        ;;
      *)
        ;;
    esac
  done
}

IN="${1}"
BACKUP="${IN}_$(date +%Y%m%d-%H%M%S).bak"
TMP="$(mktemp)"

trap 'rm -f "${TMP}" && exit' INT TERM ERR EXIT

STREAMS=()
COUNTERS=()
TITLES=()
LANGUAGES=()
KEEP=false

OPTIONS=k
LONGOPTIONS=keep
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ "${#}" -ge 1 ]; do
  case "${1}" in
    -k|--keep)
      KEEP=true
      shift 1
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: invalid flag."
      exit 3
      ;;
  esac
done

if ! [ "${#}" -eq 1 ]; then
  show_error "ERROR: invalid # of inputs. Exitng."
  exit 3
fi

# Force UTF-8 locale, if possible.
LANG="$(locale -a | grep "utf-\?8" | head -n 1)"
if [ -n "${LANG}" ]; then
  export LC_ALL="${LANG}"
else
  show_warning "Failed to force UTF-8 locale."
fi

parse_streams

TYPE="$(file -bi "${IN}")"
if [[ "${TYPE}" =~ matroska ]]; then
  if command -v mkvpropedit >/dev/null; then
    strip_matroska
  else
    show_warning "WARNING: mkvtoolnix-cli not found. Defaulting to ffmpeg."
    strip_generic "mkv"
  fi
elif [[ "${TYPE}" =~ mp4|m4a|m4v|quicktime ]]; then
  strip_generic "mp4"
elif [[ "${TYPE}" =~ x-msvideo ]]; then
  strip_generic "avi"
else
  show_error "ERROR: file type ${TYPE@Q} unsupported. Exiting."
  exit 3
fi

sync
