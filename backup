#! /bin/bash
set -euo pipefail

ROOT="$(dirname "${0}")"

source "${ROOT}"/globals

! check_command grep rsync && exit 3

#
# Functions
#

# Check if path for backup1 exists.
function backup_exists() {
  if ! [[ -v backup1 ]]; then
    show_error "backup1 variable is unset."
    exit 1
  fi
  if ! [ -d "${backup1}" ]; then
    show_error "Backup destination ${backup1@Q} does not exist."
    exit 1
  fi
}

# Backup home directory to Backups 1 and 2
function sync_home() {
  local cmd
  local excludedir

  cmd="rsync -Pradog --delete-excluded ${HOME}/ ${backup1}/${USER^}/"
  cmd="${cmd} ${vboxdir:+--exclude ${vboxdir#"${HOME}"/}\\*}"
  cmd="${cmd} ${kvmdir:+--exclude ${kvmdir#"${HOME}"/}\\*}"
  for excludedir in "${EXCLUDEDIRS[@]}"; do
    cmd="${cmd} --exclude ${excludedir#"${HOME}"/}\\*"
  done

  show_info "Syncing ${HOME@Q} to ${backup1@Q}."
  mkdir -p "${backup1}/${USER^}/"
  bash -c "${cmd}"
  sync
  show_success "Done." && echo

  if [[ -v backup2 ]] && [ -d "${backup2}" ]; then
    show_info "Syncing ${backup1@Q} to ${backup2@Q}."
    sudo rsync -Pradog --delete-excluded \
      "${backup1}/" "${backup2}/" \
      --exclude ".Trash-1000/*"
    sync
    show_success "Done." && echo
  fi
}

# Backup VMS to Backups 1 and 2
function sync_vms() {
  show_info "Syncing VMs in ${HOME@Q} to ${backup1@Q}."
  mkdir -p "${backup1}/Images/KVM"
  mkdir -p "${backup1}/Images/VirtualBox"
  sudo bash << EOF
if [[ -n "${kvmdir}" ]] && [[ -d "${kvmdir}" ]]; then
  rsync -Pradog --sparse "${kvmdir}/" "${backup1}/Images/KVM/"
fi
if [[ -n "${vboxdir}" ]] && [[ -d "${vboxdir}" ]]; then
  rsync -Pradog "${vboxdir}/" "${backup1}/Images/VirtualBox/"
fi
EOF
  sync
  show_success "Done." && echo

  if [ -d "${backup2}" ]; then
    show_info "Syncing VMs in ${backup1@Q} to ${backup2@Q}."
    mkdir -p "${backup2}/Images/KVM"
    mkdir -p "${backup2}/Images/VirtualBox"
    sudo bash << EOF
rsync -Pradog --sparse "${backup1}/Images/KVM/" "${backup2}/Images/KVM/"
rsync -Pradog "${backup1}/Images/VirtualBox/" "${backup2}/Images/VirtualBox/"
EOF
    sync
    show_success "Done." && echo
  fi
}

#
# Main
#

backup_exists
if grep -q "${HOME}" /etc/mtab; then
  show_error "ERROR: Home directories found in /etc/mtab. Unmount and try again."
  exit 1
fi

SYNC_HOME=false
SYNC_VM=false

EXCLUDEDIRS=()

OPTIONS=ahv
LONGOPTIONS=all,home,vms
PARSED=$(getopt -o "${OPTIONS}" --long "${LONGOPTIONS}" -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ ${#} -ge 1 ]; do
  case ${1} in
    -a | --all)
      SYNC_HOME=true
      SYNC_VM=true
      shift
      break
      ;;
    -h | --home)
      SYNC_HOME=true
      shift
      ;;
    -v | --vms)
      SYNC_VM=true
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: Invalid flag ${1@Q}."
      exit 3
      ;;
  esac
done

${SYNC_HOME} && sync_home
${SYNC_VM} && sync_vms
