#! /bin/bash
set -eu
source globals

function format_c() {
  if command -v clang-format >/dev/null; then
    if [[ "$(file -bi "${1}")" =~ "x-c++;"|"x-c;" ]]; then
      local tmp
      tmp="$(mktemp)"
      clang-format -style=mozilla "${1}" > "${tmp}"
      mv "${tmp}" "${1}"
    else
      show_warning "WARNING: ${1} incompatible MIME type. Skipping."
    fi
  else
    show_error "ERROR: clang-format missing. Exiting"
    exit 3
  fi
}
export -f format_c

function format_python() {
  if command -v black >/dev/null; then
    if [[ "$(file -bi "${1}")" =~ x-script.python ]]; then
      black -q -l 79 "${1}"
    else
      show_warning "WARNING: ${1} incompatible MIME type. Skipping."
    fi
  else
    show_error "ERROR: black missing. Exiting"
    exit 3
  fi
}
export -f format_python

function print_usage() {
  show_header "Usage:"
  show_listitem "  -l|--language    programming language (e.g. c++, python)"
  show_listitem "  -i|--input       input file or directory"
  show_listitem "  -h|--help        print (this) message"
}

OPTIONS=hi:l:
LONGOPTIONS=help,input:language:
PARSED=$(getopt -o ${OPTIONS} --long ${LONGOPTIONS} -n "$0" -- "$@")
eval set -- "$PARSED"

while [ $# -ge 1 ]; do
  case "$1" in
    -l|--language)
      LANGUAGE="${2}"
      shift 2
      ;;
    -i|--input)
      INPUT="${2}"
      shift 2
      ;;
    -h|--help)
      print_usage
      exit
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "Error"
      exit 3
      ;;
  esac
done


if ! [[ -v LANGUAGE ]]; then
  show_error "ERROR: language ('-l' flag) unset. Exiting."
  exit 3
fi

if ! [[ -v INPUT ]]; then
  show_error "ERROR: input ('-i' flag) unspecified. Exiting."
  exit 3
fi

if [[ -f "${INPUT}" ]]; then
  case "$LANGUAGE" in
    c|C|c++|C++|cpp|CPP)
      format_c "$INPUT"
      ;;
    python|Python)
      format_python "$INPUT"
      ;;
    *)
      show_error "error"
      exit 3
      ;;
  esac
elif [[ -d "${INPUT}" ]]; then
  case "$LANGUAGE" in
    c|C|c++|C++|cpp|CPP)
      find "${INPUT}" -type f \
        -not \( -path "./.git*" \
                -o -path "./docs/*" \
                -o -path "*README*" \
                -o -path "*readme*" \
                -o -path "*LICENSE*" \
                -o -path "*license*" \
                -o -path "*.Rhistory" \) \
        -exec bash -c 'format_c "${1}"' bash {} \;
      ;;
    python|Python)
      find "${INPUT}" -type f \
        -not \( -path "./.git*" \
                -o -path "./docs/*" \
                -o -path "*README*" \
                -o -path "*readme*" \
                -o -path "*LICENSE*" \
                -o -path "*license*" \
                -o -path "*.Rhistory" \) \
        -exec bash -c 'format_python "${1}"' bash {} \;
      ;;
    *)
      show_error "error"
      exit 3
      ;;
  esac
fi

show_success "Done!"
