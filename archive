#! /bin/bash
set -eu
source globals

#
# Functions
#

# Returns a string containing all the files and directories passed in the
# command line. Paths prefixed with '~/' are converted to '${HOME}'. Symlinks
# are expanded and included as if they were in the current working directory.
function make_pathstring() {
  pathstring=""
  for item in "${@}"; do
    if [ -e "${item}" ]; then
      dir="$(pwd)"
      if [ "${item:0:2}" = "~/" ]; then
        item="${HOME}/${item:2}"
        dir="$(dirname "${item}")"
      fi
      if [ -L "${item}" ]; then
        dir=$(dirname "$(readlink -f "${item}")")
      fi
      pathstring+="-C "\"${dir}\"" "\"${item}\"" "
    else
      show_error "Item ${item} does not exist. Exiting."
      exit 2
    fi
  done
  echo "${pathstring}"
}

# Generate a name for the archive. For single directories, the name will be
# <dirname>_<timestamp>. For multiple files and directories, the name will be
# the basename of the directory from which the script is called. For single
# files, the name sill be <basename>_<timestamp>.
function make_archivename() {
  archive=""
  if [ $# -eq 1 ] && [ -d "${1}" ]; then
    dir=${1}
    if [ "${dir:0:2}" = "~/" ]; then
      dir="${HOME}/${dir:2}"
    fi
    archive=$(basename "${dir}" | tr "[:upper:]" "[:lower:]" | \
              sed -e "s/^\.//g" | sed -e "s/\ /_/g")_$(date +%Y%m%d-%H%M%S)
  elif [ $# -eq 1 ] && [ -f "${1}" ]; then
    file=${1}
    if [ "${file:0:2}" = "~/" ]; then
      file="${HOME}/${file:2}"
    fi
    archive=$(echo "${file%.*}" | tr "[:upper:]" "[:lower:]" | \
              sed -e "s/^\.//g" | sed -e "s/\ /_/g")_$(date +%Y%m%d-%H%M%S)
  elif [ $# -gt 1 ]; then
    dir=$(pwd)
    if [ "${dir:0:2}" = "~/" ]; then
      dir="${HOME}/${dir:2}"
    fi
    archive="$(basename "${dir}" | tr "[:upper:]" "[:lower:]" | \
               sed -e "s/^\.//g")_$(date +%Y%m%d-%H%M%S)"
  fi
  echo "${archive}"
}

# Take the (1) archive name and the (2) pathstring and compress into a tarball
# to be found in $archivedir (see globals). Uses pigz (parallelized gzip
# compression) if available.
function compress_archive() {
  mkdir -p "${archivedir}"
  if command -v pigz >/dev/null 2>&1; then
    run="tar cf - --exclude='*.sw[a-p]' ${2}"
    eval "${run}" | pigz > "${archivedir}/${1}.tar.gz"
  else
    run="tar czf ${archivedir}/${1}.tar.gz --exclude='*.sw[a-p]' ${2}"
    eval "${run}"
  fi
}


#
# Main
#

if [ $# == 0 ]; then
  show_error "Incorrect # of parameters."
  echo "Usage: archive /path/to/directory1 /path/to/directory2 ..."
  exit 1
fi

items=("${@}")

pathstring="$(make_pathstring "${items[@]}")"
archive="$(make_archivename "${items[@]}")"

if [ -z "${pathstring}" ]; then
  show_error "Path string is empty. Exiting."
  exit 1
elif [ -z "${archive}" ]; then
  show_error "Archive name is empty. Exiting."
  exit 1
fi

compress_archive "${archive}" "${pathstring}"
