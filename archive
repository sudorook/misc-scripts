#! /bin/bash
set -eu
source globals

#
# Functions
#

# Returns a string containing all the files and directories passed in the
# command line. Paths prefixed with '~/' are converted to '/home/<user>'.
function make_pathstring() {
  pathstring=""
  for item in ${@}; do
    if [ -e ${item} ]; then
      if [ "${item:0:2}" = "~/" ]; then
        item="${HOME}/${item:2}"
      fi
      pathstring+=${item}" "
    else
      show_error "Item ${item} does not exist. Exiting."
      exit 2
    fi
  done
  echo ${pathstring}
}

# Generate a name for the archive. For single directories, the name will be
# <dirname>_<timestamp>. For multiple files and directories, the name will be
# the basename of the directory from which the script is called.
function make_archivename() {
  if [ $# -eq 1 ] && [ -d ${1} ]; then
    dir=${1}
    if [ "${dir:0:2}" = "~/" ]; then
      dir="${HOME}/${dir:2}"
    fi
    archive=$(basename ${dir} | tr "[:upper:]" "[:lower:]" | \
              sed -e "s/^\.//g")_$(date +%Y%m%d-%I%M%S)
  elif [ $# -gt 1 ]; then
    dir=`pwd`
    if [ "${dir:0:2}" = "~/" ]; then
      dir="${HOME}/${dir:2}"
    fi
    archive=$(basename ${dir} | tr "[:upper:]" "[:lower:]" | \
              sed -e "s/^\.//g")_$(date +%Y%m%d-%I%M%S)
  fi
  echo ${archive}
}

# Take the (1) archive name and the (2) pathstring and compress into a tarball
# to be found in ~/Desktop. Uses pigz (parallelized compression) if available.
function compress_archive() {
  mkdir -p ${HOME}/Desktop
  if command -v pigz >/dev/null 2>&1; then
    tar cf - --exclude='*.sw[a-p]' ${2} | pigz > "${HOME}/Desktop/${1}.tar.gz"
  else
    tar czf "${HOME}/Desktop/${1}.tar.gz" --exclude='*.sw[a-p]' ${2}
  fi
}


#
# Main
#

if [ $# == 0 ]; then
  show_error "Incorrect # of parameters."
  echo "Usage: archive /path/to/directory1 /path/to/directory2 ..."
  exit 1
fi

pathstring="$(make_pathstring ${@})"
archive="$(make_archivename ${@})"

compress_archive "${archive}" "${pathstring}"
